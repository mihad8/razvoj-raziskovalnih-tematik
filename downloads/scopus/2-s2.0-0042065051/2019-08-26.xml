<abstracts-retrieval-response xmlns="http://www.elsevier.com/xml/svapi/abstract/dtd" xmlns:dn="http://www.elsevier.com/xml/svapi/abstract/dtd" xmlns:ait="http://www.elsevier.com/xml/ani/ait" xmlns:ce="http://www.elsevier.com/xml/ani/common" xmlns:cto="http://www.elsevier.com/xml/cto/dtd" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:prism="http://prismstandard.org/namespaces/basic/2.0/" xmlns:xocs="http://www.elsevier.com/xml/xocs/dtd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><coredata><prism:url>https://api.elsevier.com/content/abstract/scopus_id/0042065051</prism:url><dc:identifier>SCOPUS_ID:0042065051</dc:identifier><eid>2-s2.0-0042065051</eid><dc:title>Analysis of object serialization in Java and .NET Časovna in prostorska analiza serializacije objektov v Javi in .NET</dc:title><prism:aggregationType>Journal</prism:aggregationType><srctype>j</srctype><subtype>ar</subtype><subtypeDescription>Article</subtypeDescription><citedby-count>0</citedby-count><prism:publicationName>Elektrotehniski Vestnik/Electrotechnical Review</prism:publicationName><source-id>16651</source-id><prism:issn>00135852</prism:issn><prism:volume>70</prism:volume><prism:issueIdentifier>3</prism:issueIdentifier><prism:startingPage>155</prism:startingPage><prism:endingPage>161</prism:endingPage><prism:pageRange>155-161</prism:pageRange><prism:coverDate>2003-08-22</prism:coverDate><openaccess/><openaccessFlag/><dc:creator><author seq="1" auid="6603385018"><ce:initials>M.</ce:initials><ce:indexed-name>Hericko M.</ce:indexed-name><ce:surname>Heričko</ce:surname><ce:given-name>Marjan</ce:given-name><preferred-name><ce:initials>M.</ce:initials><ce:indexed-name>Heričko M.</ce:indexed-name><ce:surname>Heričko</ce:surname><ce:given-name>Marjan</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/6603385018</author-url><affiliation id="60004060" href="https://api.elsevier.com/content/affiliation/affiliation_id/60004060"/></author></dc:creator><dc:description><abstract xmlns="" original="y" xml:lang="eng"><ce:para>Object serialization is the process of writing the state of an object to a stream. Deserialization is the process of rebuilding the stream back into an object. Serialization has become an important concept in modern software platforms, such as Java and .NET. Both platforms provide extensive support for serialization, which eases the development. Serialization is the underlying concept of many other technologies. It is particularly important for remote method invocation and the distributed object models, where it allows marshaling objects by value and sending them across process and computer boundaries. Serialization can represent the serialized state of an object using binary or XML format. We would expect that binary serialization is more effective in terms of memory space and time, as it needs to do much less transformations than XML serialization. XML serialization on the other hand is more portable than binary, it is human readable and it is used in software architectures based on web services. Therefore, in this paper we compare binary and XML serialization in terms of space and time on lava and .NET platforms. For the purposes of this paper we measured the time required to serialize the TestObject and Contract objects. We also measured the memory space used for serialization. The time required for serialization assesses the efficiency of built-in serialization algorithms. The memory space assesses the efficiency of the in-memory representation in case of binary serialization and the XML vocabulary used for XML serialization. Binary and XML serialization differ in the way they represent the serialized state of the objects. Therefore, the selection will depend on our requirements and on what we will do with the serialized objects. The key criteria include the need for data sharing between different systems, accessibility of the data, execution speed and limitations of the object model. Binary serialization is a representative of deep serialization. It includes all object attributes, including private and protected members. Binary serialization is also capable of handling object graphs with cyclic references. XML serialization on the other hand serializes only public class members and is not capable of handling object graphs with cyclic references. XML serialization is a representative of shallow serialization. Our measurements showed that both Java and .NET provide adequate support for serialization. Java performs better in binary serialization; though it requires more memory for serialized objects than .NET. For XML serialization .NET performs much better than Java. The memory footprint is however comparable. For simpler object .NET is more effective, whilst for complex Java is better. The major reason for the poor Java performance in XML serialization is the Castor framework, which uses SAX for deserialization. Java is namely particularly slow in XML deserialization. The other differences relate to the size of metadata included with serialization and the efficiency of the XML vocabulary for serialization, where the major differences are in the way data types are specified. XML and binary serialization are very useful concepts. They are well supported. XML serialization requires more attention in the Java platform.</ce:para></abstract></dc:description><link href="https://api.elsevier.com/content/abstract/scopus_id/0042065051" rel="self"/><link href="https://www.scopus.com/inward/record.uri?partnerID=HzOxMe3b&amp;scp=0042065051&amp;origin=inward" rel="scopus"/><link href="https://www.scopus.com/inward/citedby.uri?partnerID=HzOxMe3b&amp;scp=0042065051&amp;origin=inward" rel="scopus-citedby"/></coredata><affiliation id="60004060" href="https://api.elsevier.com/content/affiliation/affiliation_id/60004060"><affilname>Univerza v Mariboru</affilname><affiliation-city>Maribor</affiliation-city><affiliation-country>Slovenia</affiliation-country></affiliation><authors><author seq="1" auid="6603385018"><ce:initials>M.</ce:initials><ce:indexed-name>Hericko M.</ce:indexed-name><ce:surname>Heričko</ce:surname><ce:given-name>Marjan</ce:given-name><preferred-name><ce:initials>M.</ce:initials><ce:indexed-name>Heričko M.</ce:indexed-name><ce:surname>Heričko</ce:surname><ce:given-name>Marjan</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/6603385018</author-url><affiliation id="60004060" href="https://api.elsevier.com/content/affiliation/affiliation_id/60004060"/></author><author seq="2" auid="7003941190"><ce:initials>M.B.</ce:initials><ce:indexed-name>Juric M.B.</ce:indexed-name><ce:surname>Jurič</ce:surname><ce:given-name>Matjaž B.</ce:given-name><preferred-name><ce:initials>M.B.</ce:initials><ce:indexed-name>Jurič M.</ce:indexed-name><ce:surname>Jurič</ce:surname><ce:given-name>Matjaž B.</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/7003941190</author-url><affiliation id="60004060" href="https://api.elsevier.com/content/affiliation/affiliation_id/60004060"/></author><author seq="3" auid="7003701924"><ce:initials>I.</ce:initials><ce:indexed-name>Rozman I.</ce:indexed-name><ce:surname>Rozman</ce:surname><ce:given-name>Ivan</ce:given-name><preferred-name><ce:initials>I.</ce:initials><ce:indexed-name>Rozman I.</ce:indexed-name><ce:surname>Rozman</ce:surname><ce:given-name>Ivan</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/7003701924</author-url><affiliation id="60004060" href="https://api.elsevier.com/content/affiliation/affiliation_id/60004060"/></author></authors><language xml:lang="slv"/><authkeywords><author-keyword>.NET</author-keyword><author-keyword>Binary</author-keyword><author-keyword>Java</author-keyword><author-keyword>Serialization</author-keyword><author-keyword>Time ana space analysis</author-keyword><author-keyword>XML</author-keyword></authkeywords><idxterms><mainterm weight="a" candidate="n">Object serialization</mainterm></idxterms><subject-areas><subject-area code="2208" abbrev="ENGI">Electrical and Electronic Engineering</subject-area></subject-areas><item xmlns=""><ait:process-info><ait:date-delivered year="2017" month="08" day="04" timestamp="2017-08-04T06:02:10.000010-04:00"/><ait:date-sort year="2003" month="08" day="22"/><ait:status type="core" state="update" stage="S300"/></ait:process-info><bibrecord><item-info><copyright type="Elsevier">Copyright 2008 Elsevier B.V., All rights reserved.</copyright><itemidlist><itemid idtype="PUI">36978582</itemid><itemid idtype="CPX">2003347604082</itemid><itemid idtype="SCP">0042065051</itemid><itemid idtype="SGR">0042065051</itemid></itemidlist><history><date-created year="2003" month="08" day="22"/></history><dbcollection>CPX</dbcollection><dbcollection>Scopusbase</dbcollection></item-info><head><citation-info><citation-type code="ar"/><citation-language xml:lang="slv" language="Slovenian"/><abstract-language xml:lang="eng" language="English"/><abstract-language xml:lang="slv" language="Slovenian"/><author-keywords><author-keyword>.NET</author-keyword><author-keyword>Binary</author-keyword><author-keyword>Java</author-keyword><author-keyword>Serialization</author-keyword><author-keyword>Time ana space analysis</author-keyword><author-keyword>XML</author-keyword></author-keywords></citation-info><citation-title><titletext xml:lang="eng" original="n" language="English">Analysis of object serialization in Java and .NET</titletext><titletext xml:lang="slv" original="y" language="Slovenian">Časovna in prostorska analiza serializacije objektov v Javi in .NET</titletext></citation-title><author-group><author auid="6603385018" seq="1"><ce:initials>M.</ce:initials><ce:indexed-name>Hericko M.</ce:indexed-name><ce:surname>Heričko</ce:surname><ce:given-name>Marjan</ce:given-name><preferred-name><ce:initials>M.</ce:initials><ce:indexed-name>Heričko M.</ce:indexed-name><ce:surname>Heričko</ce:surname><ce:given-name>Marjan</ce:given-name></preferred-name></author><author auid="7003941190" seq="2"><ce:initials>M.B.</ce:initials><ce:indexed-name>Juric M.B.</ce:indexed-name><ce:surname>Jurič</ce:surname><ce:given-name>Matjaž B.</ce:given-name><preferred-name><ce:initials>M.B.</ce:initials><ce:indexed-name>Jurič M.</ce:indexed-name><ce:surname>Jurič</ce:surname><ce:given-name>Matjaž B.</ce:given-name></preferred-name></author><author auid="7003701924" seq="3"><ce:initials>I.</ce:initials><ce:indexed-name>Rozman I.</ce:indexed-name><ce:surname>Rozman</ce:surname><ce:given-name>Ivan</ce:given-name><preferred-name><ce:initials>I.</ce:initials><ce:indexed-name>Rozman I.</ce:indexed-name><ce:surname>Rozman</ce:surname><ce:given-name>Ivan</ce:given-name></preferred-name></author><affiliation afid="60004060" dptid="103252976" country="svn"><organization>Univerza v Mariboru</organization><organization>Fak. Elektrotehniko, R.I.</organization><organization>Inštitut za Informatiko</organization><address-part>Smetanova 17</address-part><city-group>2000 Maribor</city-group><affiliation-id afid="60004060" dptid="103252976"/><country>Slovenia</country></affiliation></author-group><correspondence><person><ce:initials>M.</ce:initials><ce:indexed-name>Hericko M.</ce:indexed-name><ce:surname>Heričko</ce:surname></person><affiliation country="svn"><organization>Univerza v Mariboru</organization><organization>Fak. Elektrotehniko, R.I.</organization><organization>Inštitut za Informatiko</organization><address-part>Smetanova 17</address-part><city-group>2000 Maribor</city-group><country>Slovenia</country></affiliation></correspondence><abstracts><abstract original="y" xml:lang="eng"><ce:para>Object serialization is the process of writing the state of an object to a stream. Deserialization is the process of rebuilding the stream back into an object. Serialization has become an important concept in modern software platforms, such as Java and .NET. Both platforms provide extensive support for serialization, which eases the development. Serialization is the underlying concept of many other technologies. It is particularly important for remote method invocation and the distributed object models, where it allows marshaling objects by value and sending them across process and computer boundaries. Serialization can represent the serialized state of an object using binary or XML format. We would expect that binary serialization is more effective in terms of memory space and time, as it needs to do much less transformations than XML serialization. XML serialization on the other hand is more portable than binary, it is human readable and it is used in software architectures based on web services. Therefore, in this paper we compare binary and XML serialization in terms of space and time on lava and .NET platforms. For the purposes of this paper we measured the time required to serialize the TestObject and Contract objects. We also measured the memory space used for serialization. The time required for serialization assesses the efficiency of built-in serialization algorithms. The memory space assesses the efficiency of the in-memory representation in case of binary serialization and the XML vocabulary used for XML serialization. Binary and XML serialization differ in the way they represent the serialized state of the objects. Therefore, the selection will depend on our requirements and on what we will do with the serialized objects. The key criteria include the need for data sharing between different systems, accessibility of the data, execution speed and limitations of the object model. Binary serialization is a representative of deep serialization. It includes all object attributes, including private and protected members. Binary serialization is also capable of handling object graphs with cyclic references. XML serialization on the other hand serializes only public class members and is not capable of handling object graphs with cyclic references. XML serialization is a representative of shallow serialization. Our measurements showed that both Java and .NET provide adequate support for serialization. Java performs better in binary serialization; though it requires more memory for serialized objects than .NET. For XML serialization .NET performs much better than Java. The memory footprint is however comparable. For simpler object .NET is more effective, whilst for complex Java is better. The major reason for the poor Java performance in XML serialization is the Castor framework, which uses SAX for deserialization. Java is namely particularly slow in XML deserialization. The other differences relate to the size of metadata included with serialization and the efficiency of the XML vocabulary for serialization, where the major differences are in the way data types are specified. XML and binary serialization are very useful concepts. They are well supported. XML serialization requires more attention in the Java platform.</ce:para></abstract></abstracts><source srcid="16651" type="j" country="svn"><sourcetitle>Elektrotehniski Vestnik/Electrotechnical Review</sourcetitle><sourcetitle-abbrev>Elektroteh Vestn Electrotech Rev</sourcetitle-abbrev><issn>00135852</issn><codencode>ELVEA</codencode><volisspag><voliss volume="70" issue="3"/><pagerange first="155" last="161"/></volisspag><publicationyear first="2003"/><publicationdate><year>2003</year><date-text xfab-added="true">2003</date-text></publicationdate></source><enhancement><classificationgroup><classifications type="CPXCLASS"><classification>716</classification><classification>722.1</classification><classification>723.1.1</classification></classifications><classifications type="ASJC"><classification>2208</classification></classifications><classifications type="SUBJABBR"><classification>ENGI</classification></classifications></classificationgroup></enhancement></head><tail><bibliography refcount="11"><reference id="79070297"><ref-info><ref-title><ref-titletext>Measuring the performance of communication middleware on high-speed networks</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">0030264641</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>A.S.</ce:initials><ce:indexed-name>Gokhale A.S.</ce:indexed-name><ce:surname>Gokhale</ce:surname></author><author seq="2"><ce:initials>D.C.</ce:initials><ce:indexed-name>Schmidt D.C.</ce:indexed-name><ce:surname>Schmidt</ce:surname></author></ref-authors><ref-sourcetitle>Proc. of the SIGCOMM 1996 Conference</ref-sourcetitle><ref-volisspag><pagerange first="306" last="317"/></ref-volisspag><ref-text>San Francisco, USA</ref-text></ref-info><ref-fulltext>A. S. Gokhale, D. C. Schmidt, "Measuring the Performance of Communication Middleware on High-Speed Networks", Proc. of the SIGCOMM 1996 Conference, pp. 306-317, San Francisco, USA.</ref-fulltext></reference><reference id="79070298"><ref-info><ref-title><ref-titletext>Measuring and optimizing CORBA latency and scalability over high-speed networks</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">0032051312</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>A.S.</ce:initials><ce:indexed-name>Gokhale A.S.</ce:indexed-name><ce:surname>Gokhale</ce:surname></author><author seq="2"><ce:initials>D.C.</ce:initials><ce:indexed-name>Schmidt D.C.</ce:indexed-name><ce:surname>Schmidt</ce:surname></author></ref-authors><ref-sourcetitle>IEEE Transactions on Computers</ref-sourcetitle><ref-publicationyear first="1998"/><ref-volisspag><voliss volume="47" issue="4"/><pagerange first="391" last="413"/></ref-volisspag></ref-info><ref-fulltext>A. S. Gokhale, D. C. Schmidt, "Measuring and Optimizing CORBA Latency and Scalability Over High-Speed Networks", IEEE Transactions on Computers, vol. 47, no. 4, pp. 391-413, 1998.</ref-fulltext></reference><reference id="79070299"><ref-info><refd-itemidlist><itemid idtype="SGR">0042037228</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>S.A.</ce:initials><ce:indexed-name>Lo S.A.</ce:indexed-name><ce:surname>Lo</ce:surname></author></ref-authors><ref-sourcetitle>The Implementation of a Low Call Overhead IIOP-based Object Request Broker</ref-sourcetitle><ref-publicationyear first="1997"/><ref-website><websitename>Olivetti and Oracle Research Laboratory</websitename><ce:e-address type="url">www.orl.co.uk</ce:e-address></ref-website><ref-text>April</ref-text></ref-info><ref-fulltext>S. A. Lo, "The Implementation of a Low Call Overhead IIOP-based Object Request Broker", Olivetti &amp; Oracle Research Laboratory, April 1997 (www.orl.co.uk).</ref-fulltext></reference><reference id="79070300"><ref-info><ref-title><ref-titletext>Reflective ORBs: Supporting robust, time-critical distribution</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">84957595905</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>A.</ce:initials><ce:indexed-name>Singhai A.</ce:indexed-name><ce:surname>Singhai</ce:surname></author><author seq="2"><ce:initials>A.</ce:initials><ce:indexed-name>Sane A.</ce:indexed-name><ce:surname>Sane</ce:surname></author><author seq="3"><ce:initials>R.</ce:initials><ce:indexed-name>Campbell R.</ce:indexed-name><ce:surname>Campbell</ce:surname></author></ref-authors><ref-sourcetitle>ECOOP'97 Workshop Proc., LNCS</ref-sourcetitle><ref-publicationyear first="1997"/><ref-volisspag><voliss volume="1357"/><pagerange first="55" last="61"/></ref-volisspag><ref-text>Springer, Jyväskylä, Finland</ref-text></ref-info><ref-fulltext>A. Singhai, A. Sane, R. Campbell, "Reflective ORBs: Supporting Robust, Time-critical Distribution", ECOOP'97 Workshop Proc., LNCS 1357, pp. 55-61, Springer, Jyväskylä, Finland, 1997.</ref-fulltext></reference><reference id="79070301"><ref-info><ref-title><ref-titletext>Performance comparison of CORBA and RMI</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">0034274331</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.B.</ce:initials><ce:indexed-name>Juric M.B.</ce:indexed-name><ce:surname>Jurič</ce:surname></author></ref-authors><ref-sourcetitle>Information and Software Technology Journal</ref-sourcetitle><ref-publicationyear first="2001"/><ref-volisspag><voliss volume="42" issue="13"/><pagerange first="915" last="933"/></ref-volisspag><ref-text>Elsevier</ref-text></ref-info><ref-fulltext>M. B. Jurič, "Performance Comparison of CORBA and RMI", Information and Software Technology Journal, vol. 42, no. 13, pp. 915-933, Elsevier, 2001.</ref-fulltext></reference><reference id="79070302"><ref-info><ref-title><ref-titletext>Java and distributed object models: An analysis</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">0041536013</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.</ce:initials><ce:indexed-name>Hericko M.</ce:indexed-name><ce:surname>Heričko</ce:surname></author><author seq="2"><ce:initials>M.B.</ce:initials><ce:indexed-name>Juric M.B.</ce:indexed-name><ce:surname>Jurič</ce:surname></author><author seq="3"><ce:initials>A.</ce:initials><ce:indexed-name>Zivkovic A.</ce:indexed-name><ce:surname>Živkovič</ce:surname></author><author seq="4"><ce:initials>I.</ce:initials><ce:indexed-name>Rozman I.</ce:indexed-name><ce:surname>Rozman</ce:surname></author></ref-authors><ref-sourcetitle>ACM SIGPLAN Notices</ref-sourcetitle><ref-publicationyear first="1998"/><ref-volisspag><voliss volume="33" issue="12"/><pagerange first="57" last="65"/></ref-volisspag></ref-info><ref-fulltext>M. Heričko, M. B. Jurič, A. Živkovič, I. Rozman, "Java and Distributed Object Models: An Analysis", ACM SIGPLAN Notices, vol. 33, no. 12, pp. 57-65, 1998.</ref-fulltext></reference><reference id="79070303"><ref-info><ref-title><ref-titletext>Are distributed objects fast enough</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">0042037229</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.B.</ce:initials><ce:indexed-name>Juric M.B.</ce:indexed-name><ce:surname>Jurič</ce:surname></author><author seq="2"><ce:initials>A.</ce:initials><ce:indexed-name>Zivkovic A.</ce:indexed-name><ce:surname>Živkovič</ce:surname></author><author seq="3"><ce:initials>I.</ce:initials><ce:indexed-name>Rozman I.</ce:indexed-name><ce:surname>Rozman</ce:surname></author></ref-authors><ref-sourcetitle>More Java Gems</ref-sourcetitle><ref-publicationyear first="2000"/><ref-volisspag><pagerange first="391" last="403"/></ref-volisspag><ref-text>Cambridge University Press</ref-text></ref-info><ref-fulltext>M. B. Jurič, A. Živkovič, I. Rozman, "Are Distributed Objects Fast Enough", More Java Gems, pp. 391-403, Cambridge University Press, 2000.</ref-fulltext></reference><reference id="79070304"><ref-info><ref-title><ref-titletext>CORBA and RMI distributed object models comparison with focus on performance</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">0042538056</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.B.</ce:initials><ce:indexed-name>Juric M.B.</ce:indexed-name><ce:surname>Jurič</ce:surname></author><author seq="2"><ce:initials>I.</ce:initials><ce:indexed-name>Rozman I.</ce:indexed-name><ce:surname>Rozman</ce:surname></author><author seq="3"><ce:initials>M.</ce:initials><ce:indexed-name>Hericko M.</ce:indexed-name><ce:surname>Heričko</ce:surname></author></ref-authors><ref-sourcetitle>Elektrotehniški Vestnik</ref-sourcetitle><ref-publicationyear first="2000"/><ref-volisspag><voliss volume="67"/><pagerange first="1"/></ref-volisspag></ref-info><ref-fulltext>M. B. Jurič, I. Rozman, M. Heričko, "CORBA and RMI Distributed Object Models Comparison with Focus on Performance", Elektrotehniški vestnik, let. 67, št. 1, st. 47-54, 2000.</ref-fulltext></reference><reference id="79070305"><ref-info><refd-itemidlist><itemid idtype="SGR">0042037227</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.B.</ce:initials><ce:indexed-name>Juric M.B.</ce:indexed-name><ce:surname>Jurič</ce:surname></author><author seq="2"><ce:initials>A.</ce:initials><ce:indexed-name>Rehan A.</ce:indexed-name><ce:surname>Rehan</ce:surname></author><author seq="3"><ce:initials>A.</ce:initials><ce:indexed-name>Olsen A.</ce:indexed-name><ce:surname>Olsen</ce:surname></author><author seq="4"><ce:initials>E.</ce:initials><ce:indexed-name>Lippert E.</ce:indexed-name><ce:surname>Lippert</ce:surname></author></ref-authors><ref-sourcetitle>VB.NET Serialization Handbook</ref-sourcetitle><ref-publicationyear first="2002"/><ref-text>Wrox Press</ref-text></ref-info><ref-fulltext>M. B. Jurič, A. Rehan, A. Olsen, E. Lippert, "VB.NET Serialization Handbook", Wrox Press, 2002.</ref-fulltext></reference><reference id="79070306"><ref-info><refd-itemidlist><itemid idtype="SGR">0043038837</itemid></refd-itemidlist><ref-website><ce:e-address type="url">http://www.castor.org/xml-framework.html</ce:e-address></ref-website></ref-info><ref-fulltext>http://www.castor.org/xml-framework.html.</ref-fulltext></reference><reference id="79070307"><ref-info><refd-itemidlist><itemid idtype="SGR">0042538057</itemid></refd-itemidlist><ref-website><ce:e-address type="url">http://java.sun.com/aboutJava/communityprocess/jsr/jsr_031_xmld.html</ce:e-address></ref-website></ref-info><ref-fulltext>http://java.sun.com/aboutJava/community process/jsr/jsr_031_xmld.html.</ref-fulltext></reference></bibliography></tail></bibrecord></item></abstracts-retrieval-response>