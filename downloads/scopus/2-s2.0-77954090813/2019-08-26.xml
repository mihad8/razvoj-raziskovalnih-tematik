<abstracts-retrieval-response xmlns="http://www.elsevier.com/xml/svapi/abstract/dtd" xmlns:dn="http://www.elsevier.com/xml/svapi/abstract/dtd" xmlns:ait="http://www.elsevier.com/xml/ani/ait" xmlns:ce="http://www.elsevier.com/xml/ani/common" xmlns:cto="http://www.elsevier.com/xml/cto/dtd" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:prism="http://prismstandard.org/namespaces/basic/2.0/" xmlns:xocs="http://www.elsevier.com/xml/xocs/dtd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><coredata><prism:url>https://api.elsevier.com/content/abstract/scopus_id/77954090813</prism:url><dc:identifier>SCOPUS_ID:77954090813</dc:identifier><eid>2-s2.0-77954090813</eid><prism:doi>10.1002/spe.973</prism:doi><dc:title>Extending applications using an advanced approach to DLL injection and API hooking</dc:title><prism:aggregationType>Journal</prism:aggregationType><srctype>j</srctype><subtype>ar</subtype><subtypeDescription>Article</subtypeDescription><citedby-count>16</citedby-count><prism:publicationName>Software - Practice and Experience</prism:publicationName><source-id>20007</source-id><prism:issn>00380644 1097024X</prism:issn><prism:volume>40</prism:volume><prism:issueIdentifier>7</prism:issueIdentifier><prism:startingPage>567</prism:startingPage><prism:endingPage>584</prism:endingPage><prism:pageRange>567-584</prism:pageRange><prism:coverDate>2010-06-01</prism:coverDate><openaccess>2</openaccess><openaccessFlag/><dc:creator><author seq="1" auid="36145757200"><ce:initials>J.</ce:initials><ce:indexed-name>Berdajs J.</ce:indexed-name><ce:surname>Berdajs</ce:surname><preferred-name><ce:initials>J.</ce:initials><ce:indexed-name>Berdajs J.</ce:indexed-name><ce:surname>Berdajs</ce:surname><ce:given-name>J.</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/36145757200</author-url><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"/></author></dc:creator><dc:description><abstract xmlns="" original="y" xml:lang="eng"><ce:para>When programmers need to modify third-party applications, they frequently do not have access to their source code. In such cases, DLL injection and API hooking are techniques that can be used to modify applications without intervening into their source code. The commonly used varieties of injection and hooking approaches have many practical limitations: they are inconvenient for a programmer to implement, do not work reliably in conjunction with all applications and with certain low-level machine instructions. In this paper we present two novel approaches to DLL injection and API hooking, which we call Debuggeraided DLL injection and Single Instruction Hooking. Our approaches overcome the limitations of the state-of-the art approaches. Despite incurring greater execution times, our approach allows extending of the applications in situations where the comparable approaches fail. As such, it has a notable practical value for beneficial practical applications of injection and hooking approaches, which are present in malware detection programs and computer security tools. Copyright © 2010 John Wiley &amp; Sons, Ltd. Copyright © 2010 John Wiley &amp; Sons, Ltd.</ce:para></abstract></dc:description><link href="https://api.elsevier.com/content/abstract/scopus_id/77954090813" rel="self"/><link href="https://www.scopus.com/inward/record.uri?partnerID=HzOxMe3b&amp;scp=77954090813&amp;origin=inward" rel="scopus"/><link href="https://www.scopus.com/inward/citedby.uri?partnerID=HzOxMe3b&amp;scp=77954090813&amp;origin=inward" rel="scopus-citedby"/></coredata><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"><affilname>University of Ljubljana</affilname><affiliation-city>Ljubljana</affiliation-city><affiliation-country>Slovenia</affiliation-country></affiliation><authors><author seq="1" auid="36145757200"><ce:initials>J.</ce:initials><ce:indexed-name>Berdajs J.</ce:indexed-name><ce:surname>Berdajs</ce:surname><preferred-name><ce:initials>J.</ce:initials><ce:indexed-name>Berdajs J.</ce:indexed-name><ce:surname>Berdajs</ce:surname><ce:given-name>J.</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/36145757200</author-url><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"/></author><author seq="2" auid="23566763400"><ce:initials>Z.</ce:initials><ce:indexed-name>Bosnic Z.</ce:indexed-name><ce:surname>Bosnić</ce:surname><preferred-name><ce:initials>Z.</ce:initials><ce:indexed-name>Bosnić Z.</ce:indexed-name><ce:surname>Bosnić</ce:surname><ce:given-name>Z.</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/23566763400</author-url><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"/></author></authors><language xml:lang="eng"/><authkeywords><author-keyword>API hooking</author-keyword><author-keyword>Application extensions</author-keyword><author-keyword>Detours</author-keyword><author-keyword>DLL injection</author-keyword><author-keyword>Programming</author-keyword></authkeywords><idxterms><mainterm weight="a" candidate="n">Computer security</mainterm><mainterm weight="a" candidate="n">Execution time</mainterm><mainterm weight="a" candidate="n">Injection programming</mainterm><mainterm weight="a" candidate="n">Machine instructions</mainterm><mainterm weight="a" candidate="n">Malware detection</mainterm><mainterm weight="a" candidate="n">Source codes</mainterm><mainterm weight="a" candidate="n">State of the art</mainterm></idxterms><subject-areas><subject-area code="1712" abbrev="COMP">Software</subject-area></subject-areas><item xmlns=""><ait:process-info><ait:date-delivered day="11" month="07" timestamp="2019-07-11T09:08:08.000008-04:00" year="2019"/><ait:date-sort day="01" month="06" year="2010"/><ait:status stage="S300" state="update" type="core"/></ait:process-info><bibrecord><item-info><copyright type="Elsevier">Copyright 2010 Elsevier B.V., All rights reserved.</copyright><itemidlist><ce:doi>10.1002/spe.973</ce:doi><itemid idtype="PUI">359092510</itemid><itemid idtype="CPX">20102713050221</itemid><itemid idtype="SCP">77954090813</itemid><itemid idtype="SGR">77954090813</itemid></itemidlist><history><date-created day="05" month="07" year="2010"/></history><dbcollection>CPX</dbcollection><dbcollection>Scopusbase</dbcollection></item-info><head><citation-info><citation-type code="ar"/><citation-language xml:lang="eng" language="English"/><abstract-language xml:lang="eng" language="English"/><author-keywords><author-keyword xml:lang="eng">API hooking</author-keyword><author-keyword xml:lang="eng">Application extensions</author-keyword><author-keyword xml:lang="eng">Detours</author-keyword><author-keyword xml:lang="eng">DLL injection</author-keyword><author-keyword xml:lang="eng">Programming</author-keyword></author-keywords></citation-info><citation-title><titletext original="y" xml:lang="eng" language="English">Extending applications using an advanced approach to DLL injection and API hooking</titletext></citation-title><author-group><author auid="36145757200" seq="1"><ce:initials>J.</ce:initials><ce:indexed-name>Berdajs J.</ce:indexed-name><ce:surname>Berdajs</ce:surname><preferred-name><ce:initials>J.</ce:initials><ce:indexed-name>Berdajs J.</ce:indexed-name><ce:surname>Berdajs</ce:surname><ce:given-name>J.</ce:given-name></preferred-name></author><author auid="23566763400" seq="2"><ce:initials>Z.</ce:initials><ce:indexed-name>Bosnic Z.</ce:indexed-name><ce:surname>Bosnić</ce:surname><preferred-name><ce:initials>Z.</ce:initials><ce:indexed-name>Bosnić Z.</ce:indexed-name><ce:surname>Bosnić</ce:surname><ce:given-name>Z.</ce:given-name></preferred-name></author><affiliation afid="60031106" country="svn"><organization>Faculty of Computer and Information Science</organization><organization>University of Ljubljana</organization><address-part>Tržaška cesta 25</address-part><city-group>1000 Ljubljana</city-group><affiliation-id afid="60031106"/><country>Slovenia</country></affiliation></author-group><correspondence><person><ce:initials>J.</ce:initials><ce:indexed-name>Berdajs J.</ce:indexed-name><ce:surname>Berdajs</ce:surname></person><affiliation country="svn"><organization>Faculty of Computer and Information Science</organization><organization>University of Ljubljana</organization><address-part>Tržaška cesta 25</address-part><city-group>1000 Ljubljana</city-group><country>Slovenia</country></affiliation></correspondence><abstracts><abstract original="y" xml:lang="eng"><ce:para>When programmers need to modify third-party applications, they frequently do not have access to their source code. In such cases, DLL injection and API hooking are techniques that can be used to modify applications without intervening into their source code. The commonly used varieties of injection and hooking approaches have many practical limitations: they are inconvenient for a programmer to implement, do not work reliably in conjunction with all applications and with certain low-level machine instructions. In this paper we present two novel approaches to DLL injection and API hooking, which we call Debuggeraided DLL injection and Single Instruction Hooking. Our approaches overcome the limitations of the state-of-the art approaches. Despite incurring greater execution times, our approach allows extending of the applications in situations where the comparable approaches fail. As such, it has a notable practical value for beneficial practical applications of injection and hooking approaches, which are present in malware detection programs and computer security tools. Copyright © 2010 John Wiley &amp; Sons, Ltd. Copyright © 2010 John Wiley &amp; Sons, Ltd.</ce:para></abstract></abstracts><source country="gbr" srcid="20007" type="j"><sourcetitle>Software - Practice and Experience</sourcetitle><sourcetitle-abbrev>Software Pract Exper</sourcetitle-abbrev><issn type="print">00380644</issn><issn type="electronic">1097024X</issn><codencode>SPEXB</codencode><volisspag><voliss issue="7" volume="40"/><pagerange first="567" last="584"/></volisspag><publicationyear first="2010"/><publicationdate><year>2010</year><month>06</month><date-text xfab-added="true">June 2010</date-text></publicationdate><website><ce:e-address type="url">http://www3.interscience.wiley.com/cgi-bin/fulltext/123359612/PDFSTART</ce:e-address></website></source><enhancement><classificationgroup><classifications type="CPXCLASS"><classification> <classification-code>723</classification-code> <classification-description>Computer Software, Data Handling and Applications</classification-description> </classification><classification> <classification-code>723.1</classification-code> <classification-description>Computer Programming</classification-description> </classification><classification> <classification-code>723.2</classification-code> <classification-description>Data Processing</classification-description> </classification><classification> <classification-code>902.3</classification-code> <classification-description>Legal Aspects</classification-description> </classification></classifications><classifications type="GEOCLASS"><classification> <classification-code>Related Topics</classification-code> </classification></classifications><classifications type="ASJC"><classification>1712</classification></classifications><classifications type="SUBJABBR"><classification>COMP</classification></classifications></classificationgroup></enhancement></head><tail><bibliography refcount="36"><reference id="1"><ref-info><ref-title><ref-titletext>Load your 32-bit DLL into another process's address space using INJLIB</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">77954140057</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>J.</ce:initials><ce:indexed-name>Richter J.</ce:indexed-name><ce:surname>Richter</ce:surname></author></ref-authors><ref-sourcetitle>Microsoft Systems Journal</ref-sourcetitle><ref-publicationyear first="1994"/><ref-volisspag><voliss issue="5" volume="9"/><pagerange first="1" last="10"/></ref-volisspag></ref-info><ref-fulltext>Richter J. Load your 32-bit DLL into another process's address space using INJLIB. Microsoft Systems Journal 1994;9(5):1-10.</ref-fulltext></reference><reference id="2"><ref-info><ref-title><ref-titletext>Detours: Binary interception of Win32 functions</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">0010300118</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>G.</ce:initials><ce:indexed-name>Hunt G.</ce:indexed-name><ce:surname>Hunt</ce:surname></author><author seq="2"><ce:initials>D.</ce:initials><ce:indexed-name>Brubacher D.</ce:indexed-name><ce:surname>Brubacher</ce:surname></author></ref-authors><ref-sourcetitle>Proceedings of the Third USENIX Windows NT Symposium</ref-sourcetitle><ref-publicationyear first="1999"/><ref-volisspag><pagerange first="135" last="143"/></ref-volisspag><ref-text>Seattle, WA</ref-text></ref-info><ref-fulltext>Hunt G, Brubacher D. Detours: Binary interception of Win32 functions. Proceedings of the Third USENIX Windows NT Symposium, Seattle, WA, 1999;135-143.</ref-fulltext></reference><reference id="3"><ref-info><refd-itemidlist><itemid idtype="SGR">84887480094</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>C.</ce:initials><ce:indexed-name>Keong C.</ce:indexed-name><ce:surname>Keong</ce:surname></author></ref-authors><ref-sourcetitle>Application Programming Interface</ref-sourcetitle><ref-website><ce:e-address type="url">http://en.wikipedia.org/wiki/API</ce:e-address></ref-website><ref-text>Available at:, 4 March 2010</ref-text></ref-info><ref-fulltext>Keong C. Application programming interface. Available at: http://en. wikipedia.org/wiki/API [4 March 2010].</ref-fulltext></reference><reference id="4"><ref-info><refd-itemidlist><itemid idtype="SGR">77954124466</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>A.</ce:initials><ce:indexed-name>Alpaydin A.</ce:indexed-name><ce:surname>Alpaydin</ce:surname></author><author seq="2"><ce:initials>D.</ce:initials><ce:indexed-name>Maxey D.</ce:indexed-name><ce:surname>Maxey</ce:surname></author><author seq="3"><ce:initials>M.</ce:initials><ce:indexed-name>Pietrek M.</ce:indexed-name><ce:surname>Pietrek</ce:surname></author></ref-authors><ref-sourcetitle>Undocumented Windows</ref-sourcetitle><ref-publicationyear first="1992"/><ref-text>Addison-Wesley: Reading, MA</ref-text></ref-info><ref-fulltext>Alpaydin A, Maxey D, Pietrek M. Undocumented Windows. Addison-Wesley: Reading, MA, 1992.</ref-fulltext></reference><reference id="5"><ref-info><refd-itemidlist><itemid idtype="SGR">0002964245</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.</ce:initials><ce:indexed-name>Pietrek M.</ce:indexed-name><ce:surname>Pietrek</ce:surname></author></ref-authors><ref-sourcetitle>Windows Internals</ref-sourcetitle><ref-publicationyear first="1993"/><ref-text>Addison-Wesley Professional: Reading, MA</ref-text></ref-info><ref-fulltext>Pietrek M. Windows Internals. Addison-Wesley Professional: Reading, MA, 1993.</ref-fulltext></reference><reference id="6"><ref-info><refd-itemidlist><itemid idtype="SGR">2942629506</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>G.</ce:initials><ce:indexed-name>Nebbett G.</ce:indexed-name><ce:surname>Nebbett</ce:surname></author></ref-authors><ref-sourcetitle>Windows NT/2000 Native API Reference</ref-sourcetitle><ref-publicationyear first="2000"/><ref-text>Macmillan Technical Publishing: New York</ref-text></ref-info><ref-fulltext>Nebbett G. Windows NT/2000 Native API Reference. Macmillan Technical Publishing: New York, 2000.</ref-fulltext></reference><reference id="7"><ref-info><ref-title><ref-titletext>Peering inside the PE: A tour of the Win32 portable executable file format</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">52049125166</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.</ce:initials><ce:indexed-name>Pietrek M.</ce:indexed-name><ce:surname>Pietrek</ce:surname></author></ref-authors><ref-sourcetitle>Microsoft Systems Journal</ref-sourcetitle><ref-publicationyear first="1994"/><ref-volisspag><voliss issue="3" volume="9"/><pagerange first="15" last="34"/></ref-volisspag></ref-info><ref-fulltext>Pietrek M. Peering inside the PE: A tour of the Win32 portable executable file format. Microsoft Systems Journal 1994;9(3):15-34.</ref-fulltext></reference><reference id="8"><ref-info><ref-title><ref-titletext>An in-depth look into the Win32 portable executable file format</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">33646867135</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.</ce:initials><ce:indexed-name>Pietrek M.</ce:indexed-name><ce:surname>Pietrek</ce:surname></author></ref-authors><ref-sourcetitle>MSDN Magazine</ref-sourcetitle><ref-publicationyear first="2002"/></ref-info><ref-fulltext>Pietrek M. An in-depth look into the Win32 portable executable file format. MSDN Magazine, 2002.</ref-fulltext></reference><reference id="9"><ref-info><ref-title><ref-titletext>An in-depth look into the Win32 portable executable file format, part 2</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">77954091999</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.</ce:initials><ce:indexed-name>Pietrek M.</ce:indexed-name><ce:surname>Pietrek</ce:surname></author></ref-authors><ref-sourcetitle>MSDN Magazine</ref-sourcetitle><ref-publicationyear first="2002"/></ref-info><ref-fulltext>Pietrek M. An in-depth look into the Win32 portable executable file format, part 2. MSDN Magazine, 2002.</ref-fulltext></reference><reference id="10"><ref-info><refd-itemidlist><itemid idtype="SGR">84867463286</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>J.</ce:initials><ce:indexed-name>Shewmaker J.</ce:indexed-name><ce:surname>Shewmaker</ce:surname></author></ref-authors><ref-sourcetitle>Analyzing DLL Injection</ref-sourcetitle><ref-website><ce:e-address type="url">http://www.bluenotch.com/files/Shewmaker-DLL-Injection.pdf</ce:e-address></ref-website><ref-text>Available at:, 4 March 2010</ref-text></ref-info><ref-fulltext>Shewmaker J. Analyzing DLL injection. Available at: http://www.bluenotch. com/files/Shewmaker-DLL-Injection.pdf [4 March 2010].</ref-fulltext></reference><reference id="11"><ref-info><refd-itemidlist><itemid idtype="SGR">77954099381</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>R.</ce:initials><ce:indexed-name>Pulley R.</ce:indexed-name><ce:surname>Pulley</ce:surname></author></ref-authors><ref-sourcetitle>Extending Task Manager with DLL Injection</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.codeproject.com/KB/threads/taskex.aspx</ce:e-address></ref-website><ref-text>Available at:, 4 March</ref-text></ref-info><ref-fulltext>Pulley R. Extending task manager with DLL injection. Available at: http://www.codeproject.com/KB/threads/taskex.aspx [4 March 2010].</ref-fulltext></reference><reference id="12"><ref-info><refd-itemidlist><itemid idtype="SGR">77954110217</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>R.</ce:initials><ce:indexed-name>Kuster R.</ce:indexed-name><ce:surname>Kuster</ce:surname></author></ref-authors><ref-sourcetitle>Three Ways to Inject Your Code Into Another Process</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.codeproject.com/KB/threads/taskex.aspx</ce:e-address></ref-website><ref-text>Available at:, 4 March</ref-text></ref-info><ref-fulltext>Kuster R. Three ways to inject your code into another process. Available at: http://www.codeproject.com/KB/threads/taskex.aspx [4 March 2010].</ref-fulltext></reference><reference id="13"><ref-info><ref-title><ref-titletext>A framework for detecting network-based code injection attacks targeting Windows and UNIX</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">33846274224</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>S.</ce:initials><ce:indexed-name>Andersson S.</ce:indexed-name><ce:surname>Andersson</ce:surname></author><author seq="2"><ce:initials>A.</ce:initials><ce:indexed-name>Clark A.</ce:indexed-name><ce:surname>Clark</ce:surname></author><author seq="3"><ce:initials>G.</ce:initials><ce:indexed-name>Mohay G.</ce:indexed-name><ce:surname>Mohay</ce:surname></author><author seq="4"><ce:initials>B.</ce:initials><ce:indexed-name>Schatz B.</ce:indexed-name><ce:surname>Schatz</ce:surname></author><author seq="5"><ce:initials>J.</ce:initials><ce:indexed-name>Zimmermann J.</ce:indexed-name><ce:surname>Zimmermann</ce:surname></author></ref-authors><ref-sourcetitle>Twenty-first Annual Computer Security Applications Conference (ACSAC'05)</ref-sourcetitle><ref-publicationyear first="2005"/><ref-volisspag><pagerange first="49" last="58"/></ref-volisspag><ref-text>Tucson, AZ</ref-text></ref-info><ref-fulltext>Andersson S, Clark A, Mohay G, Schatz B, Zimmermann J. A framework for detecting network-based code injection attacks targeting Windows and UNIX. Twenty-first Annual Computer Security Applications Conference (ACSAC'05), Tucson, AZ, 2005;49-58.</ref-fulltext></reference><reference id="14"><ref-info><ref-title><ref-titletext>Secure mobile code execution service</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">77954097777</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>L.C.</ce:initials><ce:indexed-name>Lam L.C.</ce:indexed-name><ce:surname>Lam</ce:surname></author><author seq="2"><ce:initials>Y.</ce:initials><ce:indexed-name>Yu Y.</ce:indexed-name><ce:surname>Yu</ce:surname></author><author seq="3"><ce:initials>T.C.</ce:initials><ce:indexed-name>Chiueh T.C.</ce:indexed-name><ce:surname>Chiueh</ce:surname></author></ref-authors><ref-sourcetitle>Twentieth Large Installation System Administration Conference (LISA 06)</ref-sourcetitle><ref-publicationyear first="2006"/><ref-volisspag><pagerange first="5" last="5"/></ref-volisspag><ref-text>Washington, DC</ref-text></ref-info><ref-fulltext>Lam LC, Yu Y, Chiueh TC. Secure mobile code execution service. Twentieth Large Installation System Administration Conference (LISA 06), Washington, DC, 2006;5-5.</ref-fulltext></reference><reference id="15"><ref-info><refd-itemidlist><itemid idtype="SGR">77954128335</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.</ce:initials><ce:indexed-name>Koch M.</ce:indexed-name><ce:surname>Koch</ce:surname></author></ref-authors><ref-sourcetitle>Intercept Calls to DirectX with A Proxy DLL</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.codeguru.com/cpp/g-/directx/directx8/article.php/c11453</ce:e-address></ref-website><ref-text>Available at:, 4 March</ref-text></ref-info><ref-fulltext>Koch M. Intercept calls to DirectX with a proxy DLL. Available at: http://www.codeguru.com/cpp/g-/directx/directx8/article.php/c11453 [4 March 2010].</ref-fulltext></reference><reference id="16"><ref-info><refd-itemidlist><itemid idtype="SGR">77954130146</itemid></refd-itemidlist><ref-sourcetitle>Working with the AppInit DLLs Registry Value</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://support.microsoft.com/kb/197571</ce:e-address></ref-website><ref-text>Microsoft Help and Support, Available at:, 4 March</ref-text></ref-info><ref-fulltext>Microsoft Help and Support. Working with the AppInit DLLs registry value. Available at: http://support. microsoft.com/kb/197571 [4 March 2010].</ref-fulltext></reference><reference id="17"><ref-info><refd-itemidlist><itemid idtype="SGR">77954095234</itemid></refd-itemidlist><ref-sourcetitle>Hooks and DLLs</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.codeproject.com/KB/DLL/hooks.aspx</ce:e-address></ref-website><ref-text>Newcomer JM, Available at:, 4 March</ref-text></ref-info><ref-fulltext>Newcomer JM. Hooks and DLLs. Available at: http://www.codeproject.com/KB/ DLL/hooks.aspx [4 March 2010].</ref-fulltext></reference><reference id="18"><ref-info><refd-itemidlist><itemid idtype="SGR">77954105261</itemid></refd-itemidlist><ref-sourcetitle>Explorer Suite</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.ntcore.com/exsuite.php</ce:e-address></ref-website><ref-text>NTCore, Available at:, 4 March</ref-text></ref-info><ref-fulltext>NTCore. Explorer suite. Available at: http://www.ntcore.com/exsuite.php [4 March 2010].</ref-fulltext></reference><reference id="19"><ref-info><refd-itemidlist><itemid idtype="SGR">77954137298</itemid></refd-itemidlist><ref-sourcetitle>Reflective DLL Injection</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.harmonysecurity.com/files/HS-P005ReflectiveDllInjection.pdf</ce:e-address></ref-website><ref-text>Fewer S, Available at:, 4 March</ref-text></ref-info><ref-fulltext>Fewer S. Reflective DLL injection. Available at: http://www. harmonysecurity.com/files/HS-P005 Reflective DllInjection.pdf [4 March 2010].</ref-fulltext></reference><reference id="20"><ref-info><ref-title><ref-titletext>Detection of DLL inserted by Windows malicious code</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">49049098268</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.</ce:initials><ce:indexed-name>Jang M.</ce:indexed-name><ce:surname>Jang</ce:surname></author><author seq="2"><ce:initials>H.</ce:initials><ce:indexed-name>Kim H.</ce:indexed-name><ce:surname>Kim</ce:surname></author><author seq="3"><ce:initials>Y.</ce:initials><ce:indexed-name>Yun Y.</ce:indexed-name><ce:surname>Yun</ce:surname></author></ref-authors><ref-sourcetitle>IEEE International Conference on Convergence Information Technology</ref-sourcetitle><ref-publicationyear first="2007"/><ref-volisspag><pagerange first="1059" last="1064"/></ref-volisspag></ref-info><ref-fulltext>Jang M, Kim H, Yun Y. Detection of DLL inserted by Windows malicious code. IEEE International Conference on Convergence Information Technology, 2007;1059-1064.</ref-fulltext></reference><reference id="21"><ref-info><refd-itemidlist><itemid idtype="SGR">77954116944</itemid></refd-itemidlist><ref-sourcetitle>Dll Injection and Function Interception Tutorial</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.codeproject.com/KB/DLL/DLLInjectiontutorial.aspx</ce:e-address></ref-website><ref-text>Rowhani NR, Available at:, 4 March</ref-text></ref-info><ref-fulltext>Rowhani NR. Dll injection and function interception tutorial. Available at: http://www.codeproject.com/KB/DLL/DLL Injection tutorial.aspx [4 March 2010].</ref-fulltext></reference><reference id="22"><ref-info><refd-itemidlist><itemid idtype="SGR">77954094434</itemid></refd-itemidlist><ref-sourcetitle>API Hooking Revealed</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.codeproject.com/KB/system/hooksys.aspx</ce:e-address></ref-website><ref-text>Ivanov I, Available at:, 4 March</ref-text></ref-info><ref-fulltext>Ivanov I. API hooking revealed. Available at: http://www.codeproject.com/ KB/system/hooksys.aspx [4 March 2010].</ref-fulltext></reference><reference id="23"><ref-info><ref-title><ref-titletext>Learn system-level Win32 coding techniques by writing an API spy program</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">77954118656</itemid></refd-itemidlist><ref-sourcetitle>Microsoft System Journal</ref-sourcetitle><ref-publicationyear first="1994"/><ref-volisspag><voliss volume="9"/><pagerange first="1" last="22"/></ref-volisspag><ref-text>Pietrek M</ref-text></ref-info><ref-fulltext>Pietrek M. Learn system-level Win32 coding techniques by writing an API spy program. Microsoft System Journal 1994;9:1-22.</ref-fulltext></reference><reference id="24"><ref-info><refd-itemidlist><itemid idtype="SGR">77954140598</itemid></refd-itemidlist><ref-sourcetitle>Immunity Debugger</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.immunityinc.com/products-immdbg.shtml</ce:e-address></ref-website><ref-text>Immunity I, Available at:, 4 March</ref-text></ref-info><ref-fulltext>Immunity I. Immunity debugger. Available at: http://www.immunityinc.com/ products-immdbg.shtml [4 March 2010].</ref-fulltext></reference><reference id="25"><ref-info><refd-itemidlist><itemid idtype="SGR">77954138991</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>I.D.</ce:initials><ce:indexed-name>Gomez I.D.</ce:indexed-name><ce:surname>Gomez</ce:surname></author></ref-authors><ref-sourcetitle>Intelligent Debugging for Vulnerability Analysis and Exploit Development</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.immunityinc.com/downloads/IntelligentDebugging.pdf</ce:e-address></ref-website><ref-text>Available at:, 4 March</ref-text></ref-info><ref-fulltext>Damian Gomez I. Intelligent debugging for vulnerability analysis and exploit development. Available at: http://www.immunityinc.com/downloads/ IntelligentDebugging.pdf [4 March 2010].</ref-fulltext></reference><reference id="26"><ref-info><ref-title><ref-titletext>API monitoring system for defeating worms and exploits in MS-Windows system</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">33746340642</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>H.M.</ce:initials><ce:indexed-name>Sun H.M.</ce:indexed-name><ce:surname>Sun</ce:surname></author><author seq="2"><ce:initials>Y.H.</ce:initials><ce:indexed-name>Lin Y.H.</ce:indexed-name><ce:surname>Lin</ce:surname></author><author seq="3"><ce:initials>M.F.</ce:initials><ce:indexed-name>Wu M.F.</ce:indexed-name><ce:surname>Wu</ce:surname></author></ref-authors><ref-sourcetitle>Information Security and Privacy</ref-sourcetitle><ref-publicationyear first="2006"/><ref-volisspag><pagerange first="159" last="170"/></ref-volisspag><ref-text>Melbourne, Australia</ref-text></ref-info><ref-fulltext>Sun HM, Lin YH, Wu MF. API monitoring system for defeating worms and exploits in MS-Windows system. Information Security and Privacy, Melbourne, Australia, 2006;159-170.</ref-fulltext></reference><reference id="27"><ref-info><ref-title><ref-titletext>Signature generation and detection of malware families</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">70349869466</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>V.S.</ce:initials><ce:indexed-name>Sathyanarayan V.S.</ce:indexed-name><ce:surname>Sathyanarayan</ce:surname></author><author seq="2"><ce:initials>P.</ce:initials><ce:indexed-name>Kohli P.</ce:indexed-name><ce:surname>Kohli</ce:surname></author><author seq="3"><ce:initials>B.</ce:initials><ce:indexed-name>Bruhadeshwar B.</ce:indexed-name><ce:surname>Bruhadeshwar</ce:surname></author></ref-authors><ref-sourcetitle>Proceedings of the 13th Australasian Conference on Information Security and Privacy</ref-sourcetitle><ref-publicationyear first="2008"/><ref-volisspag><pagerange first="336" last="349"/></ref-volisspag><ref-text>Wollongong, Australia</ref-text></ref-info><ref-fulltext>Sathyanarayan VS, Kohli P, Bruhadeshwar B. Signature generation and detection of malware families. Proceedings of the 13th Australasian Conference on Information Security and Privacy, Wollongong, Australia, 2008;336-349.</ref-fulltext></reference><reference id="28"><ref-info><ref-title><ref-titletext>Toward automated dynamic malware analysis using CWSandbox</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">34047110218</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>C.</ce:initials><ce:indexed-name>Willems C.</ce:indexed-name><ce:surname>Willems</ce:surname></author><author seq="2"><ce:initials>T.</ce:initials><ce:indexed-name>Holz T.</ce:indexed-name><ce:surname>Holz</ce:surname></author><author seq="3"><ce:initials>F.</ce:initials><ce:indexed-name>Freiling F.</ce:indexed-name><ce:surname>Freiling</ce:surname></author></ref-authors><ref-sourcetitle>IEEE Security and Privacy</ref-sourcetitle><ref-publicationyear first="2007"/><ref-volisspag><voliss issue="2" volume="5"/><pagerange first="32" last="39"/></ref-volisspag></ref-info><ref-fulltext>Willems C, Holz T, Freiling F. Toward automated dynamic malware analysis using CWSandbox. IEEE Security and Privacy 2007;5(2):32-39.</ref-fulltext></reference><reference id="29"><ref-info><refd-itemidlist><itemid idtype="SGR">77954132384</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>C.</ce:initials><ce:indexed-name>Keong C.</ce:indexed-name><ce:surname>Keong</ce:surname></author></ref-authors><ref-sourcetitle>Defeating Kernel Native API Hookers by Direct Service Dispatch Table Restoration</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://www.security.org.sg/code/SIG2DefeatingNativeAPIHookers.pdf</ce:e-address></ref-website><ref-text>Available at:, 4 March</ref-text></ref-info><ref-fulltext>Keong C. Defeating kernel native API hookers by direct service dispatch table restoration. Available at: http://www.security.org.sg/code/SIG2 DefeatingNativeAPIHookers.pdf [4 March 2010].</ref-fulltext></reference><reference id="30"><ref-info><refd-itemidlist><itemid idtype="SGR">0004151466</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>H.</ce:initials><ce:indexed-name>Custer H.</ce:indexed-name><ce:surname>Custer</ce:surname></author><author seq="2"><ce:initials>D.A.</ce:initials><ce:indexed-name>VvSolomon D.A.</ce:indexed-name><ce:surname>VvSolomon</ce:surname></author></ref-authors><ref-sourcetitle>Inside Windows NT</ref-sourcetitle><ref-publicationyear first="1998"/><ref-text>4th edn. Microsoft Press: Redmond, WA, U. S. A.</ref-text></ref-info><ref-fulltext>Custer H, vvSolomon DA. Inside Windows NT (4th edn). Microsoft Press: Redmond, WA, U. S. A., 1998.</ref-fulltext></reference><reference id="31"><ref-info><refd-itemidlist><itemid idtype="SGR">77954099579</itemid></refd-itemidlist><ref-sourcetitle>Overview of the Windows API</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://msdn.microsoft.com/en-us/library/aa383723(VS.85).aspx</ce:e-address></ref-website><ref-text>Network MD, Available at:, 4 March</ref-text></ref-info><ref-fulltext>Network MD. Overview of the Windows API. Available at: http://msdn. microsoft.com/en-us/library/aa383723 (VS.85).aspx [4 March 2010].</ref-fulltext></reference><reference id="32"><ref-info><refd-itemidlist><itemid idtype="SGR">77954095518</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>R.</ce:initials><ce:indexed-name>Kath R.</ce:indexed-name><ce:surname>Kath</ce:surname></author></ref-authors><ref-sourcetitle>The Win32 Debugging Application Programming Interface</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://msdn.microsoft.com/enus/library/ms809754.aspx</ce:e-address></ref-website><ref-text>Available at:, 4 March</ref-text></ref-info><ref-fulltext>Kath R. The Win32 debugging application programming interface. Available at: http://msdn. microsoft.com/enus/library/ms809754.aspx [4 March 2010].</ref-fulltext></reference><reference id="33"><ref-info><refd-itemidlist><itemid idtype="SGR">77954090346</itemid></refd-itemidlist><ref-sourcetitle>Memory Management</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://msdn.microsoft.com/en-us/library/aa366779(VS.85).aspx</ce:e-address></ref-website><ref-text>Microsoft, Available at:, 4 March</ref-text></ref-info><ref-fulltext>Microsoft. Memory management. Available at: http://msdn. microsoft.com/en-us/library/aa366779 (VS.85).aspx [4 March 2010].</ref-fulltext></reference><reference id="34"><ref-info><refd-itemidlist><itemid idtype="SGR">0010729284</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>M.</ce:initials><ce:indexed-name>Howard M.</ce:indexed-name><ce:surname>Howard</ce:surname></author><author seq="2"><ce:initials>D.</ce:initials><ce:indexed-name>LeBlanc D.</ce:indexed-name><ce:surname>LeBlanc</ce:surname></author></ref-authors><ref-sourcetitle>Writing Secure Code</ref-sourcetitle><ref-publicationyear first="2002"/><ref-text>2nd edn. Microsoft Press: Redmond, WA</ref-text></ref-info><ref-fulltext>Howard M, LeBlanc D. Writing Secure Code (2nd edn). Microsoft Press: Redmond, WA, 2002.</ref-fulltext></reference><reference id="35"><ref-info><refd-itemidlist><itemid idtype="SGR">77954119233</itemid></refd-itemidlist><ref-sourcetitle>Processes and Threads</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://msdn.microsoft.com/en-us/library/ms684841(VS.85).aspx</ce:e-address></ref-website><ref-text>Microsoft, Available at:, 4 March</ref-text></ref-info><ref-fulltext>Microsoft. Processes and threads. Available at: http://msdn. microsoft.com/en-us/library/ms684841 (VS.85).aspx [4 March 2010].</ref-fulltext></reference><reference id="36"><ref-info><refd-itemidlist><itemid idtype="SGR">77954100417</itemid></refd-itemidlist><ref-sourcetitle>Tool Help Library</ref-sourcetitle><ref-publicationyear first="2010"/><ref-website><ce:e-address type="url">http://msdn.microsoft.com/en-us/library/ms686837(VS.85).aspx</ce:e-address></ref-website><ref-text>Microsoft, Available at:, 4 March</ref-text></ref-info><ref-fulltext>Microsoft. Tool help library. Available at: http://msdn. microsoft.com/en-us/library/ms686837 (VS.85).aspx [4 March 2010].</ref-fulltext></reference></bibliography></tail></bibrecord></item></abstracts-retrieval-response>