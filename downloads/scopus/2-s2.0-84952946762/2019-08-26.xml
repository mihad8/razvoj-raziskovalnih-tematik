<abstracts-retrieval-response xmlns="http://www.elsevier.com/xml/svapi/abstract/dtd" xmlns:dn="http://www.elsevier.com/xml/svapi/abstract/dtd" xmlns:ait="http://www.elsevier.com/xml/ani/ait" xmlns:ce="http://www.elsevier.com/xml/ani/common" xmlns:cto="http://www.elsevier.com/xml/cto/dtd" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:prism="http://prismstandard.org/namespaces/basic/2.0/" xmlns:xocs="http://www.elsevier.com/xml/xocs/dtd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><coredata><prism:url>https://api.elsevier.com/content/abstract/scopus_id/84952946762</prism:url><dc:identifier>SCOPUS_ID:84952946762</dc:identifier><eid>2-s2.0-84952946762</eid><prism:doi>10.1109/ICPPW.2001.951843</prism:doi><article-number>951843</article-number><dc:title>Extracting SIMD parallelism from 'for' loops</dc:title><prism:aggregationType>Conference Proceeding</prism:aggregationType><srctype>p</srctype><subtype>cp</subtype><subtypeDescription>Conference Paper</subtypeDescription><citedby-count>8</citedby-count><prism:publicationName>Proceedings of the International Conference on Parallel Processing Workshops</prism:publicationName><dc:publisher>Institute of Electrical and Electronics Engineers Inc.</dc:publisher><source-id>21100474090</source-id><prism:isbn>0769512607</prism:isbn><prism:issn>15302016</prism:issn><prism:volume>2001-January</prism:volume><prism:startingPage>23</prism:startingPage><prism:endingPage>28</prism:endingPage><prism:pageRange>23-28</prism:pageRange><prism:coverDate>2001-01-01</prism:coverDate><openaccess/><openaccessFlag/><dc:creator><author seq="1" auid="7004621708"><ce:initials>V.</ce:initials><ce:indexed-name>Gustin V.</ce:indexed-name><ce:surname>Guštin</ce:surname><preferred-name><ce:initials>V.</ce:initials><ce:indexed-name>Guštin V.</ce:indexed-name><ce:surname>Guštin</ce:surname><ce:given-name>V.</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/7004621708</author-url><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"/></author></dc:creator><dc:description><abstract xmlns="" original="y" xml:lang="eng"><publishercopyright>© 2001 IEEE.</publishercopyright><ce:para>The need for multimedia applications has prompted the addition of a multimedia instruction set (MMX) to most existing general-purpose microprocessors. The introduction of short single-instruction multiple data (SIMD) i.e. "vectorized" instructions to the microprocessor "scalar" instruction set is supported by special hardware which enables the execution of one instruction on multiple data sets. Such a vectorized instruction set is primarily used in multimedia applications, and it seems likely that it will grow rapidly over the next few years. Thus on the one hand we have modern multimedia execution hardware and on the other we have the software and the general compilers which are not able to automatically exploit the multimedia instruction set. In addition, the compiler is not able to locate SIMD parallelism within a basic block. Our solution to these problems is to find statement candidates in the program written in the language C/C++ (as we mainly use this language), and to employ the SIMD instruction set in the easiest possible way. As we know that the compiler cannot be user-changed or modified, we can only extend the functionality of the program (compiler) by the use of specialised library routines or by macros. We prefer the latter. Why? We believe that the use of the macro library is faster than function calls, and we expect it to be simpler and more friendly for the user. The algorithm for identifying candidates for parallel processing (ICPP) is based on the fact that the program does not need any "correction" or "adoption" prior to being analysed andfinally to being translated into the SIMD instruction set. We define the macro library MacroVect.c as the substitution for the discovered statement candidates.</ce:para></abstract></dc:description><link href="https://api.elsevier.com/content/abstract/scopus_id/84952946762" rel="self"/><link href="https://www.scopus.com/inward/record.uri?partnerID=HzOxMe3b&amp;scp=84952946762&amp;origin=inward" rel="scopus"/><link href="https://www.scopus.com/inward/citedby.uri?partnerID=HzOxMe3b&amp;scp=84952946762&amp;origin=inward" rel="scopus-citedby"/></coredata><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"><affilname>University of Ljubljana</affilname><affiliation-city>Ljubljana</affiliation-city><affiliation-country>Slovenia</affiliation-country></affiliation><authors><author seq="1" auid="7004621708"><ce:initials>V.</ce:initials><ce:indexed-name>Gustin V.</ce:indexed-name><ce:surname>Guštin</ce:surname><preferred-name><ce:initials>V.</ce:initials><ce:indexed-name>Guštin V.</ce:indexed-name><ce:surname>Guštin</ce:surname><ce:given-name>V.</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/7004621708</author-url><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"/></author><author seq="2" auid="6603205527"><ce:initials>P.</ce:initials><ce:indexed-name>Bulic P.</ce:indexed-name><ce:surname>Bulić</ce:surname><preferred-name><ce:initials>P.</ce:initials><ce:indexed-name>Bulić P.</ce:indexed-name><ce:surname>Bulić</ce:surname><ce:given-name>P.</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/6603205527</author-url><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"/></author></authors><language xml:lang="eng"/><authkeywords><author-keyword>Algorithm design and analysis</author-keyword><author-keyword>Application software</author-keyword><author-keyword>Assembly</author-keyword><author-keyword>Data mining</author-keyword><author-keyword>Hardware</author-keyword><author-keyword>Information science</author-keyword><author-keyword>Libraries</author-keyword><author-keyword>Microprocessors</author-keyword><author-keyword>Parallel processing</author-keyword><author-keyword>Program processors</author-keyword></authkeywords><idxterms><mainterm weight="b" candidate="n">Algorithm design and analysis</mainterm><mainterm weight="b" candidate="n">General-purpose microprocessors</mainterm><mainterm weight="b" candidate="n">Multimedia applications</mainterm><mainterm weight="b" candidate="n">Multimedia instruction</mainterm><mainterm weight="b" candidate="n">Multiple data sets</mainterm><mainterm weight="b" candidate="n">Parallel processing</mainterm><mainterm weight="b" candidate="n">SIMD instructions</mainterm><mainterm weight="b" candidate="n">Single instruction multiple data</mainterm></idxterms><subject-areas><subject-area code="1712" abbrev="COMP">Software</subject-area><subject-area code="2600" abbrev="MATH">Mathematics (all)</subject-area><subject-area code="1708" abbrev="COMP">Hardware and Architecture</subject-area></subject-areas><item xmlns=""><ait:process-info><ait:date-delivered year="2016" month="08" day="26" timestamp="2016-08-26T13:42:26.000026+01:00"/><ait:date-sort year="2001" month="01" day="01"/><ait:status type="core" state="update" stage="S300"/></ait:process-info><bibrecord><item-info><copyright type="Elsevier">Copyright 2016 Elsevier B.V., All rights reserved.</copyright><itemidlist><ce:doi>10.1109/ICPPW.2001.951843</ce:doi><itemid idtype="PUI">607683617</itemid><itemid idtype="CAR-ID">644107644</itemid><itemid idtype="CPX">20160201794510</itemid><itemid idtype="SCP">84952946762</itemid><itemid idtype="SGR">84952946762</itemid></itemidlist><history><date-created year="2016" month="01" day="13" timestamp="BST 08:56:52"/></history><dbcollection>CPX</dbcollection><dbcollection>Scopusbase</dbcollection></item-info><head><citation-info><citation-type code="cp"/><citation-language xml:lang="eng" language="English"/><abstract-language xml:lang="eng" language="English"/><author-keywords><author-keyword>Algorithm design and analysis</author-keyword><author-keyword>Application software</author-keyword><author-keyword>Assembly</author-keyword><author-keyword>Data mining</author-keyword><author-keyword>Hardware</author-keyword><author-keyword>Information science</author-keyword><author-keyword>Libraries</author-keyword><author-keyword>Microprocessors</author-keyword><author-keyword>Parallel processing</author-keyword><author-keyword>Program processors</author-keyword></author-keywords></citation-info><citation-title><titletext xml:lang="eng" original="y" language="English">Extracting SIMD parallelism from 'for' loops</titletext></citation-title><author-group><author auid="7004621708" seq="1" type="auth"><ce:initials>V.</ce:initials><ce:indexed-name>Gustin V.</ce:indexed-name><ce:surname>Guštin</ce:surname><preferred-name><ce:initials>V.</ce:initials><ce:indexed-name>Guštin V.</ce:indexed-name><ce:surname>Guštin</ce:surname><ce:given-name>V.</ce:given-name></preferred-name></author><author auid="6603205527" seq="2" type="auth"><ce:initials>P.</ce:initials><ce:indexed-name>Bulic P.</ce:indexed-name><ce:surname>Bulić</ce:surname><preferred-name><ce:initials>P.</ce:initials><ce:indexed-name>Bulić P.</ce:indexed-name><ce:surname>Bulić</ce:surname><ce:given-name>P.</ce:given-name></preferred-name></author><affiliation afid="60031106" country="svn"><organization>Faculty of Computer and Information Science</organization><organization>University of Ljubljana</organization><address-part>Tržaška c. 25</address-part><city>Ljubljana</city><postal-code>1000</postal-code><country>Slovenia</country></affiliation></author-group><abstracts><abstract original="y" xml:lang="eng"><publishercopyright>© 2001 IEEE.</publishercopyright><ce:para>The need for multimedia applications has prompted the addition of a multimedia instruction set (MMX) to most existing general-purpose microprocessors. The introduction of short single-instruction multiple data (SIMD) i.e. "vectorized" instructions to the microprocessor "scalar" instruction set is supported by special hardware which enables the execution of one instruction on multiple data sets. Such a vectorized instruction set is primarily used in multimedia applications, and it seems likely that it will grow rapidly over the next few years. Thus on the one hand we have modern multimedia execution hardware and on the other we have the software and the general compilers which are not able to automatically exploit the multimedia instruction set. In addition, the compiler is not able to locate SIMD parallelism within a basic block. Our solution to these problems is to find statement candidates in the program written in the language C/C++ (as we mainly use this language), and to employ the SIMD instruction set in the easiest possible way. As we know that the compiler cannot be user-changed or modified, we can only extend the functionality of the program (compiler) by the use of specialised library routines or by macros. We prefer the latter. Why? We believe that the use of the macro library is faster than function calls, and we expect it to be simpler and more friendly for the user. The algorithm for identifying candidates for parallel processing (ICPP) is based on the fact that the program does not need any "correction" or "adoption" prior to being analysed andfinally to being translated into the SIMD instruction set. We define the macro library MacroVect.c as the substitution for the discovered statement candidates.</ce:para></abstract></abstracts><source srcid="21100474090" type="p" country="usa"><sourcetitle>Proceedings of the International Conference on Parallel Processing Workshops</sourcetitle><sourcetitle-abbrev>Proc. Int. Conf. Parallel Process. Workshops</sourcetitle-abbrev><translated-sourcetitle xml:lang="eng">Proceedings of the International Conference on Parallel Processing Workshops</translated-sourcetitle><issuetitle>Proceedings - International Conference on Parallel Processing Workshops, ICPPW 2001</issuetitle><issn type="print">15302016</issn><isbn type="electronic" length="10" level="volume">0769512607</isbn><volisspag><voliss volume="2001-January"/><pagerange first="23" last="28"/></volisspag><article-number>951843</article-number><publicationyear first="2001"/><publicationdate><year>2001</year><date-text xfab-added="true">2001</date-text></publicationdate><contributor-group><contributor role="edit" seq="1"><ce:initials>T.M.</ce:initials><ce:indexed-name>Pinkston T.M.</ce:indexed-name><ce:surname>Pinkston</ce:surname><ce:given-name>Timothy Mark</ce:given-name></contributor></contributor-group><publisher><publishername>Institute of Electrical and Electronics Engineers Inc.</publishername></publisher><additional-srcinfo><conferenceinfo><confevent><confname>International Conference on Parallel Processing Workshops, ICPPW 2001</confname><confseriestitle>International Conference on Parallel Processing Workshops</confseriestitle><conflocation country="esp"><city>Valencia</city></conflocation><confdate><startdate year="2001" month="09" day="03"/><enddate year="2001" month="09" day="07"/></confdate><confcatnumber>PR01260</confcatnumber><confcode>116532</confcode><confsponsors complete="n"><confsponsor>The International Association for Computers and Communications (IACC)</confsponsor></confsponsors></confevent></conferenceinfo></additional-srcinfo></source><enhancement><classificationgroup><classifications type="ASJC"><classification>1712</classification><classification>2600</classification><classification>1708</classification></classifications><classifications type="CPXCLASS"><classification> <classification-code>605</classification-code> <classification-description>Small Tools and Hardware</classification-description> </classification><classification> <classification-code>721.1</classification-code> <classification-description>Computer Theory (Includes Formal Logic, Automata Theory, Switching Theory and Programming Theory)</classification-description> </classification><classification> <classification-code>721.3</classification-code> <classification-description>Computer Circuits</classification-description> </classification><classification> <classification-code>722</classification-code> <classification-description>Computer Hardware</classification-description> </classification><classification> <classification-code>722.4</classification-code> <classification-description>Digital Computers and Systems</classification-description> </classification><classification> <classification-code>723</classification-code> <classification-description>Computer Software, Data Handling and Applications</classification-description> </classification><classification> <classification-code>903.4.1</classification-code> <classification-description>Libraries</classification-description> </classification></classifications><classifications type="FLXCLASS"><classification> <classification-code>902</classification-code> <classification-description>FLUIDEX; Related Topics</classification-description> </classification></classifications><classifications type="SUBJABBR"><classification>COMP</classification><classification>MATH</classification></classifications></classificationgroup></enhancement></head><tail/></bibrecord></item></abstracts-retrieval-response>