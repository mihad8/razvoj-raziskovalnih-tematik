<abstracts-retrieval-response xmlns="http://www.elsevier.com/xml/svapi/abstract/dtd" xmlns:dn="http://www.elsevier.com/xml/svapi/abstract/dtd" xmlns:ait="http://www.elsevier.com/xml/ani/ait" xmlns:ce="http://www.elsevier.com/xml/ani/common" xmlns:cto="http://www.elsevier.com/xml/cto/dtd" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:prism="http://prismstandard.org/namespaces/basic/2.0/" xmlns:xocs="http://www.elsevier.com/xml/xocs/dtd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><coredata><prism:url>https://api.elsevier.com/content/abstract/scopus_id/85022211967</prism:url><dc:identifier>SCOPUS_ID:85022211967</dc:identifier><eid>2-s2.0-85022211967</eid><prism:doi>10.1007/978-3-319-61425-0_14</prism:doi><dc:title>Automatic extraction of AST patterns for debugging student programs</dc:title><prism:aggregationType>Book Series</prism:aggregationType><srctype>k</srctype><subtype>cp</subtype><subtypeDescription>Conference Paper</subtypeDescription><citedby-count>6</citedby-count><prism:publicationName>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</prism:publicationName><dc:publisher>Springer Verlagservice@springer.de</dc:publisher><source-id>25674</source-id><prism:isbn>9783319614243</prism:isbn><prism:issn>16113349 03029743</prism:issn><prism:volume>10331 LNAI</prism:volume><prism:startingPage>162</prism:startingPage><prism:endingPage>174</prism:endingPage><prism:pageRange>162-174</prism:pageRange><prism:coverDate>2017-01-01</prism:coverDate><openaccess>0</openaccess><openaccessFlag>false</openaccessFlag><dc:creator><author seq="1" auid="56336124300"><ce:initials>T.</ce:initials><ce:indexed-name>Lazar T.</ce:indexed-name><ce:surname>Lazar</ce:surname><ce:given-name>Timotej</ce:given-name><preferred-name><ce:initials>T.</ce:initials><ce:indexed-name>Lazar T.</ce:indexed-name><ce:surname>Lazar</ce:surname><ce:given-name>Timotej</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/56336124300</author-url><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"/></author></dc:creator><dc:description><abstract xmlns="" original="y" xml:lang="eng"><publishercopyright>© Springer International Publishing AG 2017.</publishercopyright><ce:para>When implementing a programming tutor it is often difficult to manually consider all possible errors encountered by students. An alternative is to automatically learn a bug library of erroneous patterns from students’ programs. We propose abstract-syntax-tree (AST) patterns as features for learning rules to distinguish between correct and incorrect programs. We use these rules to debug student programs: rules for incorrect programs (buggy rules) indicate mistakes, whereas rules for correct programs group programs with the same solution strategy. To generate hints, we first check buggy rules and point out incorrect patterns. If no buggy rule matches, we use rules for correct programs to recognize the student’s intent and suggest missing patterns. We evaluate our approach on past student programming data for a number of Prolog problems. For 31 out of 44 problems, the induced rules correctly classify over 85% of programs based only on their structural features. For approximately 73% of incorrect submissions, we are able to generate hints that were implemented by the student in some subsequent submission.</ce:para></abstract></dc:description><link href="https://api.elsevier.com/content/abstract/scopus_id/85022211967" rel="self"/><link href="https://www.scopus.com/inward/record.uri?partnerID=HzOxMe3b&amp;scp=85022211967&amp;origin=inward" rel="scopus"/><link href="https://www.scopus.com/inward/citedby.uri?partnerID=HzOxMe3b&amp;scp=85022211967&amp;origin=inward" rel="scopus-citedby"/></coredata><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"><affilname>University of Ljubljana</affilname><affiliation-city>Ljubljana</affiliation-city><affiliation-country>Slovenia</affiliation-country></affiliation><authors><author seq="1" auid="56336124300"><ce:initials>T.</ce:initials><ce:indexed-name>Lazar T.</ce:indexed-name><ce:surname>Lazar</ce:surname><ce:given-name>Timotej</ce:given-name><preferred-name><ce:initials>T.</ce:initials><ce:indexed-name>Lazar T.</ce:indexed-name><ce:surname>Lazar</ce:surname><ce:given-name>Timotej</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/56336124300</author-url><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"/></author><author seq="2" auid="35409925300"><ce:initials>M.</ce:initials><ce:indexed-name>Mozina M.</ce:indexed-name><ce:surname>Možina</ce:surname><ce:given-name>Martin</ce:given-name><preferred-name><ce:initials>M.</ce:initials><ce:indexed-name>Možina M.</ce:indexed-name><ce:surname>Možina</ce:surname><ce:given-name>Martin</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/35409925300</author-url><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"/></author><author seq="3" auid="7003286588"><ce:initials>I.</ce:initials><ce:indexed-name>Bratko I.</ce:indexed-name><ce:surname>Bratko</ce:surname><ce:given-name>Ivan</ce:given-name><preferred-name><ce:initials>I.</ce:initials><ce:indexed-name>Bratko I.</ce:indexed-name><ce:surname>Bratko</ce:surname><ce:given-name>Ivan</ce:given-name></preferred-name><author-url>https://api.elsevier.com/content/author/author_id/7003286588</author-url><affiliation id="60031106" href="https://api.elsevier.com/content/affiliation/affiliation_id/60031106"/></author></authors><language xml:lang="eng"/><authkeywords><author-keyword>Abstract syntax tree</author-keyword><author-keyword>Error diagnosis</author-keyword><author-keyword>Hint generation</author-keyword><author-keyword>Programming tutors</author-keyword><author-keyword>Syntactic features</author-keyword></authkeywords><idxterms><mainterm weight="b" candidate="n">Abstract Syntax Trees</mainterm><mainterm weight="b" candidate="n">Error diagnosis</mainterm><mainterm weight="b" candidate="n">Hint generation</mainterm><mainterm weight="b" candidate="n">Programming tutors</mainterm><mainterm weight="b" candidate="n">Syntactic features</mainterm></idxterms><subject-areas><subject-area code="2614" abbrev="MATH">Theoretical Computer Science</subject-area><subject-area code="1700" abbrev="COMP">Computer Science (all)</subject-area></subject-areas><item xmlns=""><ait:process-info><ait:date-delivered year="2018" month="06" day="15" timestamp="2018-06-15T03:19:45.000045-04:00"/><ait:date-sort year="2017" month="01" day="01"/><ait:status type="core" state="update" stage="S300"/></ait:process-info><bibrecord><item-info><copyright type="Elsevier">Copyright 2017 Elsevier B.V., All rights reserved.</copyright><itemidlist><ce:doi>10.1007/978-3-319-61425-0_14</ce:doi><itemid idtype="PUI">617284169</itemid><itemid idtype="CAR-ID">666636375</itemid><itemid idtype="CPX">20172803936858</itemid><itemid idtype="SCP">85022211967</itemid><itemid idtype="SGR">85022211967</itemid></itemidlist><history><date-created year="2017" month="07" day="14" timestamp="BST 07:25:27"/></history><dbcollection>CPX</dbcollection><dbcollection>Scopusbase</dbcollection></item-info><head><citation-info><citation-type code="cp"/><citation-language xml:lang="eng" language="English"/><abstract-language xml:lang="eng" language="English"/><author-keywords><author-keyword>Abstract syntax tree</author-keyword><author-keyword>Error diagnosis</author-keyword><author-keyword>Hint generation</author-keyword><author-keyword>Programming tutors</author-keyword><author-keyword>Syntactic features</author-keyword></author-keywords></citation-info><citation-title><titletext xml:lang="eng" original="y" language="English">Automatic extraction of AST patterns for debugging student programs</titletext></citation-title><author-group><author auid="56336124300" seq="1" type="auth"><ce:initials>T.</ce:initials><ce:indexed-name>Lazar T.</ce:indexed-name><ce:surname>Lazar</ce:surname><ce:given-name>Timotej</ce:given-name><preferred-name><ce:initials>T.</ce:initials><ce:indexed-name>Lazar T.</ce:indexed-name><ce:surname>Lazar</ce:surname><ce:given-name>Timotej</ce:given-name></preferred-name></author><author auid="35409925300" seq="2" type="auth"><ce:initials>M.</ce:initials><ce:indexed-name>Mozina M.</ce:indexed-name><ce:surname>Možina</ce:surname><ce:given-name>Martin</ce:given-name><preferred-name><ce:initials>M.</ce:initials><ce:indexed-name>Možina M.</ce:indexed-name><ce:surname>Možina</ce:surname><ce:given-name>Martin</ce:given-name></preferred-name></author><author auid="7003286588" seq="3" type="auth"><ce:initials>I.</ce:initials><ce:indexed-name>Bratko I.</ce:indexed-name><ce:surname>Bratko</ce:surname><ce:given-name>Ivan</ce:given-name><preferred-name><ce:initials>I.</ce:initials><ce:indexed-name>Bratko I.</ce:indexed-name><ce:surname>Bratko</ce:surname><ce:given-name>Ivan</ce:given-name></preferred-name></author><affiliation afid="60031106" country="svn"><organization>University of Ljubljana</organization><organization>Faculty of Computer and Information Science</organization><city>Ljubljana</city><affiliation-id afid="60031106"/><country>Slovenia</country></affiliation></author-group><correspondence><person><ce:initials>T.</ce:initials><ce:indexed-name>Lazar T.</ce:indexed-name><ce:surname>Lazar</ce:surname><ce:given-name>Timotej</ce:given-name></person><affiliation country="svn"><organization>University of Ljubljana</organization><organization>Faculty of Computer and Information Science</organization><city>Ljubljana</city><country>Slovenia</country></affiliation></correspondence><abstracts><abstract original="y" xml:lang="eng"><publishercopyright>© Springer International Publishing AG 2017.</publishercopyright><ce:para>When implementing a programming tutor it is often difficult to manually consider all possible errors encountered by students. An alternative is to automatically learn a bug library of erroneous patterns from students’ programs. We propose abstract-syntax-tree (AST) patterns as features for learning rules to distinguish between correct and incorrect programs. We use these rules to debug student programs: rules for incorrect programs (buggy rules) indicate mistakes, whereas rules for correct programs group programs with the same solution strategy. To generate hints, we first check buggy rules and point out incorrect patterns. If no buggy rule matches, we use rules for correct programs to recognize the student’s intent and suggest missing patterns. We evaluate our approach on past student programming data for a number of Prolog problems. For 31 out of 44 problems, the induced rules correctly classify over 85% of programs based only on their structural features. For approximately 73% of incorrect submissions, we are able to generate hints that were implemented by the student in some subsequent submission.</ce:para></abstract></abstracts><source srcid="25674" type="k" country="deu"><sourcetitle>Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</sourcetitle><sourcetitle-abbrev>Lect. Notes Comput. Sci.</sourcetitle-abbrev><translated-sourcetitle xml:lang="eng">Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)</translated-sourcetitle><issuetitle>Artificial Intelligence in Education - 18th International Conference, AIED 2017, Proceedings</issuetitle><issn type="electronic">16113349</issn><issn type="print">03029743</issn><isbn type="print" length="13" level="volume">9783319614243</isbn><volisspag><voliss volume="10331 LNAI"/><pagerange first="162" last="174"/></volisspag><publicationyear first="2017"/><publicationdate><year>2017</year><date-text xfab-added="true">2017</date-text></publicationdate><website><ce:e-address type="email">http://springerlink.com/content/0302-9743/copyright/2005/</ce:e-address></website><contributor-group><contributor role="edit" seq="1"><ce:initials>E.</ce:initials><ce:indexed-name>Andre E.</ce:indexed-name><ce:surname>Andre</ce:surname><ce:given-name>Elisabeth</ce:given-name></contributor></contributor-group><contributor-group><contributor role="edit" seq="1"><ce:initials>X.</ce:initials><ce:indexed-name>Hu X.</ce:indexed-name><ce:surname>Hu</ce:surname><ce:given-name>Xiangen</ce:given-name></contributor></contributor-group><contributor-group><contributor role="edit" seq="1"><ce:initials>M.M.T.</ce:initials><ce:indexed-name>Rodrigo M.M.T.</ce:indexed-name><ce:surname>Rodrigo</ce:surname><ce:given-name>Ma. Mercedes T.</ce:given-name></contributor></contributor-group><contributor-group><contributor role="edit" seq="1"><ce:initials>B.</ce:initials><ce:indexed-name>du Boulay B.</ce:indexed-name><ce:surname>du Boulay</ce:surname><ce:given-name>Benedict</ce:given-name></contributor></contributor-group><contributor-group><contributor role="edit" seq="1"><ce:initials>R.</ce:initials><ce:indexed-name>Baker R.</ce:indexed-name><ce:surname>Baker</ce:surname><ce:given-name>Ryan</ce:given-name></contributor></contributor-group><publisher><publishername>Springer Verlag</publishername><ce:e-address type="email">service@springer.de</ce:e-address></publisher><additional-srcinfo><conferenceinfo><confevent><confname>18th International Conference on Artificial Intelligence in Education, AIED 2017</confname><confseriestitle>International Conference on Artificial Intelligence in Education</confseriestitle><conflocation country="chn"><city>Wuhan</city></conflocation><confdate><startdate year="2017" month="06" day="28"/><enddate year="2017" month="07" day="01"/></confdate><confcode>193679</confcode><confsponsors complete="n"><confsponsor/></confsponsors></confevent><confpublication><procpartno>1 of 1</procpartno></confpublication></conferenceinfo></additional-srcinfo></source><enhancement><classificationgroup><classifications type="CPXCLASS"><classification> <classification-code>723</classification-code> <classification-description>Computer Software, Data Handling and Applications</classification-description> </classification><classification> <classification-code>921.4</classification-code> <classification-description>Combinatorial Mathematics, Includes Graph Theory, Set Theory</classification-description> </classification></classifications><classifications type="FLXCLASS"><classification> <classification-code>902</classification-code> <classification-description>FLUIDEX; Related Topics</classification-description> </classification></classifications><classifications type="ASJC"><classification>2614</classification><classification>1700</classification></classifications><classifications type="SUBJABBR"><classification>MATH</classification><classification>COMP</classification></classifications></classificationgroup></enhancement></head><tail><bibliography refcount="17"><reference id="1"><ref-info><ref-title><ref-titletext>Trx: Regular-tree expressions, now in scheme</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">85022222176</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>I.</ce:initials><ce:indexed-name>Bagrak I.</ce:indexed-name><ce:surname>Bagrak</ce:surname></author><author seq="2"><ce:initials>O.</ce:initials><ce:indexed-name>Shivers O.</ce:indexed-name><ce:surname>Shivers</ce:surname></author></ref-authors><ref-sourcetitle>Proceeding of Fifth Workshop on Scheme and Functional Programming</ref-sourcetitle><ref-publicationyear first="2004"/><ref-volisspag><pagerange first="21" last="32"/></ref-volisspag></ref-info><ref-fulltext>Bagrak, I., Shivers, O.: trx: regular-tree expressions, now in scheme. In: Proceeding of Fifth Workshop on Scheme and Functional Programming, pp. 21–32 (2004)</ref-fulltext></reference><reference id="2"><ref-info><ref-title><ref-titletext>Rule induction with CN2: Some recent improvements</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">85015191605</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>P.</ce:initials><ce:indexed-name>Clark P.</ce:indexed-name><ce:surname>Clark</ce:surname></author><author seq="2"><ce:initials>R.</ce:initials><ce:indexed-name>Boswell R.</ce:indexed-name><ce:surname>Boswell</ce:surname></author></ref-authors><ref-sourcetitle>Proceeding Fifth European Conference on Machine Learning</ref-sourcetitle><ref-publicationyear first="1991"/><ref-volisspag><pagerange first="151" last="163"/></ref-volisspag></ref-info><ref-fulltext>Clark, P., Boswell, R.: Rule induction with CN2: some recent improvements. In: Proceeding Fifth European Conference on Machine Learning, pp. 151–163 (1991)</ref-fulltext></reference><reference id="3"><ref-info><ref-title><ref-titletext>Orange: Data mining toolbox in Python</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">84885599052</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>J.</ce:initials><ce:indexed-name>Demsar J.</ce:indexed-name><ce:surname>Demšar</ce:surname></author><author seq="2"><ce:initials>T.</ce:initials><ce:indexed-name>Curk T.</ce:indexed-name><ce:surname>Curk</ce:surname></author><author seq="3"><ce:initials>A.</ce:initials><ce:indexed-name>Erjavec A.</ce:indexed-name><ce:surname>Erjavec</ce:surname></author><author seq="4"><ce:initials>Č.</ce:initials><ce:indexed-name>Gorup C.</ce:indexed-name><ce:surname>Gorup</ce:surname></author><author seq="5"><ce:initials>T.</ce:initials><ce:indexed-name>Hocevar T.</ce:indexed-name><ce:surname>Hočevar</ce:surname></author><author seq="6"><ce:initials>M.</ce:initials><ce:indexed-name>Milutinovic M.</ce:indexed-name><ce:surname>Milutinovič</ce:surname></author><author seq="7"><ce:initials>M.</ce:initials><ce:indexed-name>Mozina M.</ce:indexed-name><ce:surname>Možina</ce:surname></author><author seq="8"><ce:initials>M.</ce:initials><ce:indexed-name>Polajnar M.</ce:indexed-name><ce:surname>Polajnar</ce:surname></author><author seq="9"><ce:initials>M.</ce:initials><ce:indexed-name>Toplak M.</ce:indexed-name><ce:surname>Toplak</ce:surname></author><author seq="10"><ce:initials>A.</ce:initials><ce:indexed-name>Staric A.</ce:indexed-name><ce:surname>Starič</ce:surname></author><author seq="11"><ce:initials>M.</ce:initials><ce:indexed-name>Stajdohar M.</ce:indexed-name><ce:surname>Štajdohar</ce:surname></author><author seq="12"><ce:initials>L.</ce:initials><ce:indexed-name>Umek L.</ce:indexed-name><ce:surname>Umek</ce:surname></author><author seq="13"><ce:initials>L.</ce:initials><ce:indexed-name>Zagar L.</ce:indexed-name><ce:surname>Žagar</ce:surname></author><author seq="14"><ce:initials>J.</ce:initials><ce:indexed-name>Zbontar J.</ce:indexed-name><ce:surname>Žbontar</ce:surname></author><author seq="15"><ce:initials>M.</ce:initials><ce:indexed-name>Zitnik M.</ce:indexed-name><ce:surname>Žitnik</ce:surname></author><author seq="16"><ce:initials>B.</ce:initials><ce:indexed-name>Zupan B.</ce:indexed-name><ce:surname>Zupan</ce:surname></author></ref-authors><ref-sourcetitle>J. Mach. Learn. Res.</ref-sourcetitle><ref-publicationyear first="2013"/><ref-volisspag><voliss volume="14"/><pagerange first="2349" last="2353"/></ref-volisspag><ref-website><ce:e-address type="email">http://jmlr.org/papers/v14/demsar13a.html</ce:e-address></ref-website></ref-info><ref-fulltext>Demšar, J., Curk, T., Erjavec, A., Gorup, Č., Hočevar, T., Milutinovič, M., Možina, M., Polajnar, M., Toplak, M., Starič, A., štajdohar, M., Umek, L., Žagar, L., Žbontar, J., Žitnik, M., Zupan, B.: Orange: data mining toolbox in Python. J. Mach. Learn. Res. 14, 2349–2353 (2013). http://jmlr.org/papers/v14/demsar13a. html</ref-fulltext></reference><reference id="4"><ref-info><ref-title><ref-titletext>Plan ahead: Pricing ITS learner models</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">85022215551</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>J.T.</ce:initials><ce:indexed-name>Folsom-Kovarik J.T.</ce:indexed-name><ce:surname>Folsom-Kovarik</ce:surname></author><author seq="2"><ce:initials>S.</ce:initials><ce:indexed-name>Schatz S.</ce:indexed-name><ce:surname>Schatz</ce:surname></author><author seq="3"><ce:initials>D.</ce:initials><ce:indexed-name>Nicholson D.</ce:indexed-name><ce:surname>Nicholson</ce:surname></author></ref-authors><ref-sourcetitle>Proceeding 19Th Behavior Representation in Modeling &amp; Simulation Conference</ref-sourcetitle><ref-publicationyear first="2010"/><ref-volisspag><pagerange first="47" last="54"/></ref-volisspag></ref-info><ref-fulltext>Folsom-Kovarik, J.T., Schatz, S., Nicholson, D.: Plan ahead: pricing ITS learner models. In: Proceeding 19th Behavior Representation in Modeling &amp; Simulation Conference, pp. 47–54 (2010)</ref-fulltext></reference><reference id="5"><ref-info><ref-title><ref-titletext>Ask-elle: An adaptable programming tutor for haskell giving automated feedback</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">85009987898</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>A.</ce:initials><ce:indexed-name>Gerdes A.</ce:indexed-name><ce:surname>Gerdes</ce:surname></author><author seq="2"><ce:initials>B.</ce:initials><ce:indexed-name>Heeren B.</ce:indexed-name><ce:surname>Heeren</ce:surname></author><author seq="3"><ce:initials>J.</ce:initials><ce:indexed-name>Jeuring J.</ce:indexed-name><ce:surname>Jeuring</ce:surname></author><author seq="4"><ce:initials>L.T.</ce:initials><ce:indexed-name>Van Binsbergen L.T.</ce:indexed-name><ce:surname>Van Binsbergen</ce:surname></author></ref-authors><ref-sourcetitle>Int. J. Artif. Intell. Educ.</ref-sourcetitle><ref-website><ce:e-address type="email">https://link.springer.com/article/10.1007/s40593-015-0080-x</ce:e-address></ref-website></ref-info><ref-fulltext>Gerdes, A., Heeren, B., Jeuring, J., van Binsbergen, L.T.: Ask-elle: an adaptable programming tutor for haskell giving automated feedback. Int. J. Artif. Intell. Educ. https://link.springer.com/article/10.1007/s40593-015-0080-x</ref-fulltext></reference><reference id="6"><ref-info><ref-title><ref-titletext>J-LATTE: A constraint-based tutor for Java</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">78650172436</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>J.</ce:initials><ce:indexed-name>Holland J.</ce:indexed-name><ce:surname>Holland</ce:surname></author><author seq="2"><ce:initials>A.</ce:initials><ce:indexed-name>Mitrovic A.</ce:indexed-name><ce:surname>Mitrovic</ce:surname></author><author seq="3"><ce:initials>B.</ce:initials><ce:indexed-name>Martin B.</ce:indexed-name><ce:surname>Martin</ce:surname></author></ref-authors><ref-sourcetitle>Proceeding 17Th International Conference Computers in Education (ICCE 2009</ref-sourcetitle><ref-publicationyear first="2009"/><ref-volisspag><pagerange first="142" last="146"/></ref-volisspag></ref-info><ref-fulltext>Holland, J., Mitrovic, A., Martin, B.: J-LATTE: a constraint-based tutor for Java. In: Proceeding 17th International Conference Computers in Education (ICCE 2009), pp. 142–146 (2009)</ref-fulltext></reference><reference id="7"><ref-info><ref-title><ref-titletext>Guided programming and automated error analysis in an intelligent Prolog tutor</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">4344600729</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>J.</ce:initials><ce:indexed-name>Hong J.</ce:indexed-name><ce:surname>Hong</ce:surname></author></ref-authors><ref-sourcetitle>Int. J. Hum.-Comput. Stud.</ref-sourcetitle><ref-publicationyear first="2004"/><ref-volisspag><voliss volume="61" issue="4"/><pagerange first="505" last="534"/></ref-volisspag></ref-info><ref-fulltext>Hong, J.: Guided programming and automated error analysis in an intelligent Prolog tutor. Int. J. Hum.-Comput. Stud. 61(4), 505–534 (2004)</ref-fulltext></reference><reference id="8"><ref-info><ref-title><ref-titletext>Program representation for automatic hint generation for a data-driven novice programming tutor</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">84862486854</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>W.</ce:initials><ce:indexed-name>Jin W.</ce:indexed-name><ce:surname>Jin</ce:surname></author><author seq="2"><ce:initials>T.</ce:initials><ce:indexed-name>Barnes T.</ce:indexed-name><ce:surname>Barnes</ce:surname></author><author seq="3"><ce:initials>J.</ce:initials><ce:indexed-name>Stamper J.</ce:indexed-name><ce:surname>Stamper</ce:surname></author><author seq="4"><ce:initials>M.J.</ce:initials><ce:indexed-name>Eagle M.J.</ce:indexed-name><ce:surname>Eagle</ce:surname></author><author seq="5"><ce:initials>M.W.</ce:initials><ce:indexed-name>Johnson M.W.</ce:indexed-name><ce:surname>Johnson</ce:surname></author><author seq="6"><ce:initials>L.</ce:initials><ce:indexed-name>Lehmann L.</ce:indexed-name><ce:surname>Lehmann</ce:surname></author></ref-authors><ref-sourcetitle>Proceeding of 11Th International Conference Intelligent Tutoring Systems</ref-sourcetitle><ref-publicationyear first="2012"/><ref-volisspag><pagerange first="304" last="309"/></ref-volisspag></ref-info><ref-fulltext>Jin, W., Barnes, T., Stamper, J., Eagle, M.J., Johnson, M.W., Lehmann, L.: Program representation for automatic hint generation for a data-driven novice programming tutor. In: Proceeding of 11th International Conference Intelligent Tutoring Systems, pp. 304–309 (2012)</ref-fulltext></reference><reference id="9"><ref-info><ref-title><ref-titletext>Understanding and debugging novice programs</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">0025385101</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>W.L.</ce:initials><ce:indexed-name>Johnson W.L.</ce:indexed-name><ce:surname>Johnson</ce:surname></author></ref-authors><ref-sourcetitle>Artif. Intell.</ref-sourcetitle><ref-publicationyear first="1990"/><ref-volisspag><voliss volume="42" issue="1"/><pagerange first="51" last="97"/></ref-volisspag></ref-info><ref-fulltext>Johnson, W.L.: Understanding and debugging novice programs. Artif. Intell. 42(1), 51–97 (1990)</ref-fulltext></reference><reference id="10"><ref-info><ref-title><ref-titletext>Towards a systematic review of automated feedback generation for programming exercises</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">84979790871</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>H.</ce:initials><ce:indexed-name>Keuning H.</ce:indexed-name><ce:surname>Keuning</ce:surname></author><author seq="2"><ce:initials>J.</ce:initials><ce:indexed-name>Jeuring J.</ce:indexed-name><ce:surname>Jeuring</ce:surname></author><author seq="3"><ce:initials>B.</ce:initials><ce:indexed-name>Heeren B.</ce:indexed-name><ce:surname>Heeren</ce:surname></author></ref-authors><ref-sourcetitle>Proceeding of 2016 ACM Conference on Innovation and Technology in Computer Science Education</ref-sourcetitle><ref-publicationyear first="2016"/><ref-volisspag><pagerange first="41" last="46"/></ref-volisspag><ref-text>ACM</ref-text></ref-info><ref-fulltext>Keuning, H., Jeuring, J., Heeren, B.: Towards a systematic review of automated feedback generation for programming exercises. In: Proceeding of 2016 ACM Conference on Innovation and Technology in Computer Science Education, pp. 41–46. ACM (2016)</ref-fulltext></reference><reference id="11"><ref-info><ref-title><ref-titletext>Operationalizing the continuum between well-defined and ill-defined problems for educational technology</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">84884219613</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>N.T.</ce:initials><ce:indexed-name>Le N.T.</ce:indexed-name><ce:surname>Le</ce:surname></author><author seq="2"><ce:initials>F.</ce:initials><ce:indexed-name>Loll F.</ce:indexed-name><ce:surname>Loll</ce:surname></author><author seq="3"><ce:initials>N.</ce:initials><ce:indexed-name>Pinkwart N.</ce:indexed-name><ce:surname>Pinkwart</ce:surname></author></ref-authors><ref-sourcetitle>IEEE Trans. Learn. Technol.</ref-sourcetitle><ref-publicationyear first="2013"/><ref-volisspag><voliss volume="6" issue="3"/><pagerange first="258" last="270"/></ref-volisspag></ref-info><ref-fulltext>Le, N.T., Loll, F., Pinkwart, N.: Operationalizing the continuum between well-defined and ill-defined problems for educational technology. IEEE Trans. Learn. Technol. 6(3), 258–270 (2013)</ref-fulltext></reference><reference id="12"><ref-info><ref-title><ref-titletext>Using weighted constraints to diagnose errors in logic programming - the case of an ill-defined domain</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">78650096362</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>N.T.</ce:initials><ce:indexed-name>Le N.T.</ce:indexed-name><ce:surname>Le</ce:surname></author><author seq="2"><ce:initials>W.</ce:initials><ce:indexed-name>Menzel W.</ce:indexed-name><ce:surname>Menzel</ce:surname></author></ref-authors><ref-sourcetitle>Int. J. Artif. Intell. Educ</ref-sourcetitle><ref-publicationyear first="2009"/><ref-volisspag><voliss volume="19" issue="4"/><pagerange first="381" last="400"/></ref-volisspag></ref-info><ref-fulltext>Le, N.T., Menzel, W.: Using weighted constraints to diagnose errors in logic programming - the case of an ill-defined domain. Int. J. Artif. Intell. Educ. 19(4), 381–400 (2009)</ref-fulltext></reference><reference id="13"><ref-info><ref-title><ref-titletext>Tregex and Tsurgeon: Tools for querying and manipulating tree data structures</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">85039165239</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>R.</ce:initials><ce:indexed-name>Levy R.</ce:indexed-name><ce:surname>Levy</ce:surname></author><author seq="2"><ce:initials>G.</ce:initials><ce:indexed-name>Andrew G.</ce:indexed-name><ce:surname>Andrew</ce:surname></author></ref-authors><ref-sourcetitle>5Th International Conference Language Resources and Evaluation</ref-sourcetitle><ref-publicationyear first="2006"/></ref-info><ref-fulltext>Levy, R., Andrew, G.: Tregex and Tsurgeon: tools for querying and manipulating tree data structures. In: 5th International Conference Language Resources and Evaluation (2006)</ref-fulltext></reference><reference id="14"><ref-info><ref-title><ref-titletext>Measuring code behavioral similarity for programming and software engineering education</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">84997125238</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>S.</ce:initials><ce:indexed-name>Li S.</ce:indexed-name><ce:surname>Li</ce:surname></author><author seq="2"><ce:initials>X.</ce:initials><ce:indexed-name>Xiao X.</ce:indexed-name><ce:surname>Xiao</ce:surname></author><author seq="3"><ce:initials>B.</ce:initials><ce:indexed-name>Bassett B.</ce:indexed-name><ce:surname>Bassett</ce:surname></author><author seq="4"><ce:initials>T.</ce:initials><ce:indexed-name>Xie T.</ce:indexed-name><ce:surname>Xie</ce:surname></author><author seq="5"><ce:initials>N.</ce:initials><ce:indexed-name>Tillmann N.</ce:indexed-name><ce:surname>Tillmann</ce:surname></author></ref-authors><ref-sourcetitle>Proceeding 38Th International Conference on Software Engineering Companion</ref-sourcetitle><ref-publicationyear first="2016"/><ref-volisspag><pagerange first="501" last="510"/></ref-volisspag><ref-text>ACM</ref-text></ref-info><ref-fulltext>Li, S., Xiao, X., Bassett, B., Xie, T., Tillmann, N.: Measuring code behavioral similarity for programming and software engineering education. In: Proceeding 38th International Conference on Software Engineering Companion, pp. 501–510. ACM (2016)</ref-fulltext></reference><reference id="15"><ref-info><ref-title><ref-titletext>Fifteen years of constraint-based tutors: What we have achieved and where we are going</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">84858702322</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>A.</ce:initials><ce:indexed-name>Mitrovic A.</ce:indexed-name><ce:surname>Mitrovic</ce:surname></author></ref-authors><ref-sourcetitle>User Model. User-Adap. Inter.</ref-sourcetitle><ref-publicationyear first="2012"/><ref-volisspag><voliss volume="22" issue="12"/><pagerange first="39" last="72"/></ref-volisspag></ref-info><ref-fulltext>Mitrovic, A.: Fifteen years of constraint-based tutors: what we have achieved and where we are going. User Model. User-Adap. Inter. 22(1–2), 39–72 (2012)</ref-fulltext></reference><reference id="16"><ref-info><ref-title><ref-titletext>Codewebs: Scalable homework search for massive open online programming courses</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">84906929037</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>A.</ce:initials><ce:indexed-name>Nguyen A.</ce:indexed-name><ce:surname>Nguyen</ce:surname></author><author seq="2"><ce:initials>C.</ce:initials><ce:indexed-name>Piech C.</ce:indexed-name><ce:surname>Piech</ce:surname></author><author seq="3"><ce:initials>J.</ce:initials><ce:indexed-name>Huang J.</ce:indexed-name><ce:surname>Huang</ce:surname></author><author seq="4"><ce:initials>L.</ce:initials><ce:indexed-name>Guibas L.</ce:indexed-name><ce:surname>Guibas</ce:surname></author></ref-authors><ref-sourcetitle>Proceeding 23Rd International Conference World Wide Web</ref-sourcetitle><ref-publicationyear first="2014"/><ref-volisspag><pagerange first="491" last="502"/></ref-volisspag></ref-info><ref-fulltext>Nguyen, A., Piech, C., Huang, J., Guibas, L.: Codewebs: scalable homework search for massive open online programming courses. In: Proceeding 23rd International Conference World Wide Web, pp. 491–502 (2014)</ref-fulltext></reference><reference id="17"><ref-info><ref-title><ref-titletext>Data-driven hint generation in vast solution spaces: A self-improving Python programming tutor</ref-titletext></ref-title><refd-itemidlist><itemid idtype="SGR">85009945283</itemid></refd-itemidlist><ref-authors><author seq="1"><ce:initials>K.</ce:initials><ce:indexed-name>Rivers K.</ce:indexed-name><ce:surname>Rivers</ce:surname></author><author seq="2"><ce:initials>K.R.</ce:initials><ce:indexed-name>Koedinger K.R.</ce:indexed-name><ce:surname>Koedinger</ce:surname></author></ref-authors><ref-sourcetitle>Int. J. Artif. Intell. Educ.</ref-sourcetitle><ref-website><ce:e-address type="email">https://link.springer.com/article/10.1007/s40593-015-0070-z</ce:e-address></ref-website></ref-info><ref-fulltext>Rivers, K., Koedinger, K.R.: Data-driven hint generation in vast solution spaces: a self-improving Python programming tutor. Int. J. Artif. Intell. Educ. https://link. springer.com/article/10.1007/s40593-015-0070-z</ref-fulltext></reference></bibliography></tail></bibrecord></item></abstracts-retrieval-response>